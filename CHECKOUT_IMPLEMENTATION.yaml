version: "1.0.0"

metadata:
  title: "E-commerce Checkout Feature Implementation"
  description: "Complete implementation of an e-commerce checkout feature following Domain Layer Template"
  lastUpdated: "2025-09-15"

structure:
  basePath: "src/"
  folders:
    - name: "features/checkout/domain/errors"
      description: "Checkout-specific error classes"
      required: true
    - name: "features/checkout/domain/use-cases"
      description: "Checkout use case interfaces"
      required: true
    - name: "features/checkout/domain/test"
      description: "Checkout test mock helpers"
      required: true

layerDependencies:
  canImportFromDomain:
    - "Data Layer - Will implement checkout use case interfaces"
    - "Presentation Layer - Will use checkout types and call use cases"
    - "Infrastructure Layer - May use checkout types for payment processing"
    - "Main/Factory Layer - Will wire checkout dependencies"
    - "Test Files - Will test checkout domain logic"
  cannotImportFromDomain:
    - "External Libraries (Stripe, PayPal, etc.)"
    - "Node Modules"
  domainCannotImportFrom:
    - "Any other layer"
    - "Data Layer"
    - "Presentation Layer"
    - "Infrastructure Layer"
    - "Main Layer"
    - "External Libraries"

domainRules:
  allowed:
    - "Cart type definitions (Cart, CartItem, Coupon)"
    - "Checkout use case interfaces"
    - "Checkout-specific error classes"
    - "Checkout test mock functions"
    - "Payment and shipping types"
  forbidden:
    - "Payment API calls"
    - "Database operations"
    - "Tax calculations"
    - "Shipping rate calculations"
    - "Email notifications"
    - "Inventory checks"
    - "Price calculations"
    - "External service integrations"

features:
  useCases:
    purpose: "Define checkout operations available in the e-commerce system"
    rules:
      should:
        - "Have one use case per file"
        - "Use Input/Output naming convention"
        - "Return promises for async operations"
        - "Be named with clear action verbs"
        - "Handle one specific checkout operation"
      shouldNot:
        - "Contain payment processing logic"
        - "Calculate taxes or shipping"
        - "Make external API calls"
        - "Combine multiple operations"
        - "Validate credit cards"
    template: |
      // Example: AddToCart use case
      export type AddToCartInput = {
        productId: string
        quantity: number
        variantId?: string
      }

      export type AddToCartOutput = {
        cartId: string
        items: CartItem[]
        subtotal: number
        itemCount: number
      }

      export interface AddToCartUseCase {
        execute: (input: AddToCartInput) => Promise<AddToCartOutput>
      }
    validationScript: |
      echo "üîç Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "‚ùå LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "‚ùå AUTO-FIX FAILED"
          exit 1
        fi
      fi
      echo "‚úÖ Lint passed"

      echo "üß™ Running tests..."
      yarn test --coverage
      echo "‚úÖ Tests passed"

      echo "üì¶ Staging changes..."
      git add .
      git commit -m "feat(checkout): add use case"

  errors:
    purpose: "Define checkout-specific domain errors"
    rules:
      should:
        - "Extend Error class"
        - "Have descriptive error messages"
        - "Include relevant context (productId, cartId, etc.)"
        - "End with 'Error' suffix"
      shouldNot:
        - "Include payment details"
        - "Expose sensitive information"
        - "Log to console"
        - "Have side effects"
    template: |
      export class CartNotFoundError extends Error {
        constructor(cartId: string) {
          super(`Cart with id ${cartId} not found`)
          this.name = 'CartNotFoundError'
        }
      }
    validationScript: |
      echo "üîç Running lint check..."
      yarn lint
      echo "‚úÖ Lint passed"

      echo "üì¶ Staging changes..."
      git add .
      git commit -m "feat(checkout): add domain error"

  testHelpers:
    purpose: "Provide mock implementations for checkout use cases"
    rules:
      should:
        - "Use Vitest for mocking"
        - "Return consistent test data"
        - "Cover all checkout scenarios"
        - "Be pure functions"
      shouldNot:
        - "Use Jest"
        - "Make real payment calls"
        - "Connect to databases"
        - "Maintain state"
    template: |
      import { vi } from 'vitest'
      import type { AddToCartUseCase, AddToCartInput, AddToCartOutput } from '../use-cases'

      export const mockAddToCartInput = (): AddToCartInput => ({
        productId: 'prod-123',
        quantity: 2,
        variantId: 'variant-456'
      })

      export const mockAddToCartOutput = (): AddToCartOutput => ({
        cartId: 'cart-789',
        items: [
          {
            productId: 'prod-123',
            quantity: 2,
            price: 29.99,
            name: 'Test Product'
          }
        ],
        subtotal: 59.98,
        itemCount: 2
      })

      export const mockAddToCartUseCase = (): AddToCartUseCase => ({
        execute: vi.fn()
      })
    validationScript: |
      echo "üîç Running lint check..."
      yarn lint
      echo "‚úÖ Lint passed"

      echo "üß™ Running tests..."
      yarn test
      echo "‚úÖ Tests passed"

      echo "üì¶ Staging changes..."
      git add .
      git commit -m "test(checkout): add test helpers"

troubleshooting:
  lintFails:
    - "Check for unused imports in checkout use cases"
    - "Verify all types are properly exported"
    - "Ensure no console.log statements"
    - "Check TypeScript strict mode compliance"
  testsFail:
    - "Verify mock data matches checkout interfaces"
    - "Check if cart calculations are mocked properly"
    - "Ensure all promises are resolved"
    - "Verify error scenarios are covered"
  typeScriptFails:
    - "Check Input/Output types consistency"
    - "Verify optional fields are marked with ?"
    - "Ensure price fields are number type"
    - "Check for circular dependencies"

refactoring:
  beforeRefactoring: |
    # Check current checkout structure
    echo "üìä Checking current structure..."
    ls -la src/features/checkout/domain/

    # Verify tests pass
    echo "üß™ Running tests before refactoring..."
    yarn test src/features/checkout/domain/

    # Create backup branch
    git checkout -b refactor/checkout-domain

  duringRefactoring: |
    # Make incremental changes
    echo "‚úèÔ∏è Refactoring checkout..."

    # After each change
    yarn lint
    yarn test

    # Commit atomically
    git add -p
    git commit -m "refactor(checkout): [specific change]"

  commonScenarios:
    - name: "Split checkout process"
      wrongExample: |
        interface AddToCartAndCheckoutUseCase {
          execute: (input: AddToCartAndCheckoutInput) => Promise<AddToCartAndCheckoutOutput>
        }
      correctExample: |
        interface AddToCartUseCase {
          execute: (input: AddToCartInput) => Promise<AddToCartOutput>
        }

        interface ProcessCheckoutUseCase {
          execute: (input: ProcessCheckoutInput) => Promise<ProcessCheckoutOutput>
        }
      script: |
        # Split the combined use case
        echo "Splitting checkout use cases..."

        # Create separate files
        touch src/features/checkout/domain/use-cases/add-to-cart.ts
        touch src/features/checkout/domain/use-cases/process-checkout.ts

        # Test each separately
        yarn test

recovery:
  accidentalCommit: |
    # Undo last commit but keep changes
    git reset --soft HEAD~1

    # Fix issues
    yarn lint --fix
    yarn test

    # Recommit
    git add .
    git commit -m "feat(checkout): [corrected message]"

  domainPolluted: |
    # Find violations
    echo "üîç Checking for violations..."

    # Check for payment logic
    grep -r "stripe\|paypal\|payment" src/features/checkout/domain/

    # Check for calculations
    grep -r "calculate\|tax\|shipping" src/features/checkout/domain/

    # Remove violations
    echo "üßπ Cleaning domain layer..."

    # Move logic to appropriate layer
    mv [implementation] src/features/checkout/data/

    # Verify clean
    yarn lint

aiGuidelines:
  - "Checkout use cases must be single-purpose operations"
  - "Always use Input/Output suffix for types"
  - "Price fields must be number type, not string"
  - "Cart IDs and Product IDs should be string type"
  - "Optional fields use ? operator (variantId?: string)"
  - "Test helpers must use Vitest, not Jest"
  - "No payment processing logic in domain layer"
  - "No tax or shipping calculations in domain"
  - "Errors must include context (cartId, productId, etc.)"
  - "Keep checkout flow steps separate (add, update, remove, checkout)"

# Specific checkout implementations
checkoutImplementations:
  CartItem:
    description: "Individual cart item type"
    code: |
      export type CartItem = {
        productId: string
        productName: string
        variantId?: string
        variantName?: string
        quantity: number
        price: number
        imageUrl?: string
        subtotal: number
      }

  Cart:
    description: "Shopping cart type"
    code: |
      export type Cart = {
        id: string
        userId?: string
        sessionId?: string
        items: CartItem[]
        subtotal: number
        discountAmount?: number
        taxAmount?: number
        shippingAmount?: number
        total: number
        couponCode?: string
        createdAt: Date
        updatedAt: Date
      }

  ShippingAddress:
    description: "Shipping address type"
    code: |
      export type ShippingAddress = {
        firstName: string
        lastName: string
        address1: string
        address2?: string
        city: string
        state: string
        country: string
        postalCode: string
        phone?: string
      }

  PaymentMethod:
    description: "Payment method type"
    code: |
      export type PaymentMethod = {
        type: 'credit_card' | 'debit_card' | 'paypal' | 'apple_pay' | 'google_pay'
        last4?: string
        brand?: string
        expiryMonth?: number
        expiryYear?: number
      }

useCaseImplementations:
  addToCart:
    description: "Add product to cart"
    template: |
      // src/features/checkout/domain/use-cases/add-to-cart.ts

      /**
       * Input parameters for AddToCartUseCase
       */
      export type AddToCartInput = {
        cartId?: string
        productId: string
        productName: string
        price: number
        quantity: number
        variantId?: string
        variantName?: string
        imageUrl?: string
      }

      /**
       * Output type for AddToCartUseCase
       */
      export type AddToCartOutput = {
        cartId: string
        items: Array<{
          productId: string
          productName: string
          variantId?: string
          quantity: number
          price: number
          subtotal: number
        }>
        subtotal: number
        itemCount: number
      }

      /**
       * AddToCartUseCase interface
       * @description Adds a product to the shopping cart
       */
      export interface AddToCartUseCase {
        /**
         * Execute the add to cart operation
         * @param input - The input parameters
         * @returns Promise with the updated cart
         */
        execute: (input: AddToCartInput) => Promise<AddToCartOutput>
      }

  removeFromCart:
    description: "Remove item from cart"
    template: |
      // src/features/checkout/domain/use-cases/remove-from-cart.ts

      /**
       * Input parameters for RemoveFromCartUseCase
       */
      export type RemoveFromCartInput = {
        cartId: string
        productId: string
        variantId?: string
      }

      /**
       * Output type for RemoveFromCartUseCase
       */
      export type RemoveFromCartOutput = {
        cartId: string
        removedProductId: string
        items: CartItem[]
        subtotal: number
        itemCount: number
      }

      /**
       * RemoveFromCartUseCase interface
       * @description Removes an item from the shopping cart
       */
      export interface RemoveFromCartUseCase {
        /**
         * Execute the remove from cart operation
         * @param input - The input parameters
         * @returns Promise with the updated cart
         */
        execute: (input: RemoveFromCartInput) => Promise<RemoveFromCartOutput>
      }

  updateCartQuantity:
    description: "Update item quantity in cart"
    template: |
      // src/features/checkout/domain/use-cases/update-cart-quantity.ts

      /**
       * Input parameters for UpdateCartQuantityUseCase
       */
      export type UpdateCartQuantityInput = {
        cartId: string
        productId: string
        variantId?: string
        quantity: number
      }

      /**
       * Output type for UpdateCartQuantityUseCase
       */
      export type UpdateCartQuantityOutput = {
        cartId: string
        updatedItem: {
          productId: string
          quantity: number
          subtotal: number
        }
        cartSubtotal: number
        itemCount: number
      }

      /**
       * UpdateCartQuantityUseCase interface
       * @description Updates the quantity of an item in the cart
       */
      export interface UpdateCartQuantityUseCase {
        /**
         * Execute the update quantity operation
         * @param input - The input parameters
         * @returns Promise with the updated cart
         */
        execute: (input: UpdateCartQuantityInput) => Promise<UpdateCartQuantityOutput>
      }

  applyCoupon:
    description: "Apply discount coupon to cart"
    template: |
      // src/features/checkout/domain/use-cases/apply-coupon.ts

      /**
       * Input parameters for ApplyCouponUseCase
       */
      export type ApplyCouponInput = {
        cartId: string
        couponCode: string
      }

      /**
       * Output type for ApplyCouponUseCase
       */
      export type ApplyCouponOutput = {
        cartId: string
        couponCode: string
        discountType: 'percentage' | 'fixed'
        discountValue: number
        discountAmount: number
        subtotal: number
        total: number
      }

      /**
       * ApplyCouponUseCase interface
       * @description Applies a discount coupon to the cart
       */
      export interface ApplyCouponUseCase {
        /**
         * Execute the apply coupon operation
         * @param input - The input parameters
         * @returns Promise with the discount details
         */
        execute: (input: ApplyCouponInput) => Promise<ApplyCouponOutput>
      }

  processCheckout:
    description: "Process checkout and create order"
    template: |
      // src/features/checkout/domain/use-cases/process-checkout.ts

      /**
       * Input parameters for ProcessCheckoutUseCase
       */
      export type ProcessCheckoutInput = {
        cartId: string
        shippingAddress: {
          firstName: string
          lastName: string
          address1: string
          address2?: string
          city: string
          state: string
          country: string
          postalCode: string
          phone?: string
        }
        billingAddress?: {
          firstName: string
          lastName: string
          address1: string
          address2?: string
          city: string
          state: string
          country: string
          postalCode: string
        }
        paymentMethodId: string
        saveAddress?: boolean
        savePaymentMethod?: boolean
      }

      /**
       * Output type for ProcessCheckoutUseCase
       */
      export type ProcessCheckoutOutput = {
        orderId: string
        orderNumber: string
        status: 'pending' | 'processing' | 'completed'
        total: number
        estimatedDelivery?: Date
      }

      /**
       * ProcessCheckoutUseCase interface
       * @description Processes the checkout and creates an order
       */
      export interface ProcessCheckoutUseCase {
        /**
         * Execute the checkout process
         * @param input - The input parameters
         * @returns Promise with the order details
         */
        execute: (input: ProcessCheckoutInput) => Promise<ProcessCheckoutOutput>
      }

errorImplementations:
  cartNotFound:
    template: |
      // src/features/checkout/domain/errors/cart-not-found-error.ts

      /**
       * Error thrown when cart is not found
       * @extends Error
       */
      export class CartNotFoundError extends Error {
        constructor(cartId: string) {
          super(`Cart with id ${cartId} not found`)
          this.name = 'CartNotFoundError'
        }
      }

  productNotAvailable:
    template: |
      // src/features/checkout/domain/errors/product-not-available-error.ts

      /**
       * Error thrown when product is not available
       * @extends Error
       */
      export class ProductNotAvailableError extends Error {
        constructor(productId: string, quantity: number) {
          super(`Product ${productId} is not available in quantity ${quantity}`)
          this.name = 'ProductNotAvailableError'
        }
      }

  invalidCoupon:
    template: |
      // src/features/checkout/domain/errors/invalid-coupon-error.ts

      /**
       * Error thrown when coupon is invalid or expired
       * @extends Error
       */
      export class InvalidCouponError extends Error {
        constructor(couponCode: string) {
          super(`Coupon ${couponCode} is invalid or expired`)
          this.name = 'InvalidCouponError'
        }
      }

  emptyCart:
    template: |
      // src/features/checkout/domain/errors/empty-cart-error.ts

      /**
       * Error thrown when trying to checkout with empty cart
       * @extends Error
       */
      export class EmptyCartError extends Error {
        constructor() {
          super('Cannot checkout with an empty cart')
          this.name = 'EmptyCartError'
        }
      }

  invalidQuantity:
    template: |
      // src/features/checkout/domain/errors/invalid-quantity-error.ts

      /**
       * Error thrown when quantity is invalid
       * @extends Error
       */
      export class InvalidQuantityError extends Error {
        constructor(quantity: number) {
          super(`Invalid quantity: ${quantity}. Quantity must be greater than 0`)
          this.name = 'InvalidQuantityError'
        }
      }

testHelperImplementations:
  mockAddToCart:
    template: |
      // src/features/checkout/domain/test/mock-add-to-cart-use-case.ts
      import { vi } from 'vitest'
      import type { AddToCartUseCase, AddToCartInput, AddToCartOutput } from '../use-cases'

      /**
       * Creates a mock instance of AddToCartInput
       * @returns Mock input for testing
       */
      export const mockAddToCartInput = (): AddToCartInput => ({
        productId: 'prod-123',
        productName: 'Test Product',
        price: 29.99,
        quantity: 2,
        variantId: 'variant-456',
        variantName: 'Size L',
        imageUrl: 'https://example.com/product.jpg'
      })

      /**
       * Creates a mock instance of AddToCartOutput
       * @returns Mock output for testing
       */
      export const mockAddToCartOutput = (): AddToCartOutput => ({
        cartId: 'cart-789',
        items: [
          {
            productId: 'prod-123',
            productName: 'Test Product',
            variantId: 'variant-456',
            quantity: 2,
            price: 29.99,
            subtotal: 59.98
          }
        ],
        subtotal: 59.98,
        itemCount: 2
      })

      /**
       * Creates a mock instance of AddToCartUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockAddToCartUseCase = (): AddToCartUseCase => ({
        execute: vi.fn()
      })

  mockProcessCheckout:
    template: |
      // src/features/checkout/domain/test/mock-process-checkout-use-case.ts
      import { vi } from 'vitest'
      import type { ProcessCheckoutUseCase, ProcessCheckoutInput, ProcessCheckoutOutput } from '../use-cases'

      /**
       * Creates a mock instance of ProcessCheckoutInput
       * @returns Mock input for testing
       */
      export const mockProcessCheckoutInput = (): ProcessCheckoutInput => ({
        cartId: 'cart-789',
        shippingAddress: {
          firstName: 'John',
          lastName: 'Doe',
          address1: '123 Main St',
          city: 'New York',
          state: 'NY',
          country: 'US',
          postalCode: '10001',
          phone: '+1234567890'
        },
        paymentMethodId: 'pm-123',
        saveAddress: true,
        savePaymentMethod: false
      })

      /**
       * Creates a mock instance of ProcessCheckoutOutput
       * @returns Mock output for testing
       */
      export const mockProcessCheckoutOutput = (): ProcessCheckoutOutput => ({
        orderId: 'order-456',
        orderNumber: 'ORD-2025-001234',
        status: 'processing',
        total: 65.97,
        estimatedDelivery: new Date('2025-01-20T10:00:00Z')
      })

      /**
       * Creates a mock instance of ProcessCheckoutUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockProcessCheckoutUseCase = (): ProcessCheckoutUseCase => ({
        execute: vi.fn()
      })

  mockApplyCoupon:
    template: |
      // src/features/checkout/domain/test/mock-apply-coupon-use-case.ts
      import { vi } from 'vitest'
      import type { ApplyCouponUseCase, ApplyCouponInput, ApplyCouponOutput } from '../use-cases'

      /**
       * Creates a mock instance of ApplyCouponInput
       * @returns Mock input for testing
       */
      export const mockApplyCouponInput = (): ApplyCouponInput => ({
        cartId: 'cart-789',
        couponCode: 'SAVE20'
      })

      /**
       * Creates a mock instance of ApplyCouponOutput
       * @returns Mock output for testing
       */
      export const mockApplyCouponOutput = (): ApplyCouponOutput => ({
        cartId: 'cart-789',
        couponCode: 'SAVE20',
        discountType: 'percentage',
        discountValue: 20,
        discountAmount: 11.99,
        subtotal: 59.98,
        total: 47.99
      })

      /**
       * Creates a mock instance of ApplyCouponUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockApplyCouponUseCase = (): ApplyCouponUseCase => ({
        execute: vi.fn()
      })