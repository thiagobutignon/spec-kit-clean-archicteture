# Clean Task Manager - Next.js 15 Project
# Execute with Claude Code to create the entire project

project:
  name: "clean-task-manager"
  description: "Task Manager for Clean Architecture Templates"
  version: "1.0.0"
  
  tech_stack:
    runtime: "node:22"
    framework: "next:15"
    language: "typescript:5"
    styling: "tailwindcss"
    ui: "shadcn-ui"
    database: "postgresql"
    orm: "prisma"
    state: "context-api"
    testing: "jest"

# Phase 1: Project Setup
setup:
  tasks:
    - id: "S001"
      title: "Initialize Next.js 15 project"
      commands:
        - "npx create-next-app@latest clean-task-manager --typescript --tailwind --app --no-src-dir --import-alias '@/*' --eslint -y"
        - "cd clean-task-manager"
    
    - id: "S002"
      title: "Install core dependencies"
      commands:
        - "cd clean-task-manager && npm install js-yaml @types/js-yaml"
        - "cd clean-task-manager && npm install lucide-react"
        - "cd clean-task-manager && npm install prisma @prisma/client"
        - "cd clean-task-manager && npm install zod"
        - "cd clean-task-manager && npm install react-hot-toast"
        - "cd clean-task-manager && npm install @monaco-editor/react"
        - "cd clean-task-manager && npm install framer-motion"
        - "cd clean-task-manager && npm install date-fns"
        - "cd clean-task-manager && npm install -D @types/node"

    - id: "S003"
      title: "Setup Shadcn UI"
      commands:
        - "cd clean-task-manager && npx shadcn-ui@latest init -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add button -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add card -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add checkbox -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add dialog -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add dropdown-menu -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add input -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add label -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add scroll-area -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add select -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add separator -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add tabs -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add textarea -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add toast -y"
        - "cd clean-task-manager && npx shadcn-ui@latest add tooltip -y"

    - id: "S004"
      title: "Create Clean Architecture structure"
      commands:
        - "cd clean-task-manager && mkdir -p app/{domain,data,infra,presentation,main}"
        - "cd clean-task-manager && mkdir -p app/domain/{models,usecases,errors}"
        - "cd clean-task-manager && mkdir -p app/data/{usecases,protocols}"
        - "cd clean-task-manager && mkdir -p app/infra/{yaml,shell,database}"
        - "cd clean-task-manager && mkdir -p app/presentation/{components,hooks,contexts,utils}"
        - "cd clean-task-manager && mkdir -p app/main/{factories,config}"
        - "cd clean-task-manager && mkdir -p app/(pages)/{dashboard,editor,settings}"
        - "cd clean-task-manager && mkdir -p app/api/{tasks,projects,validation}"

    - id: "S005"
      title: "Setup Prisma"
      commands:
        - "cd clean-task-manager && npx prisma init"
      files:
        - path: "clean-task-manager/prisma/schema.prisma"
          content: |
            generator client {
              provider = "prisma-client-js"
            }

            datasource db {
              provider = "postgresql"
              url      = env("DATABASE_URL")
            }

            model Project {
              id          String    @id @default(cuid())
              name        String
              type        String
              description String?
              techStack   Json
              features    Feature[]
              createdAt   DateTime  @default(now())
              updatedAt   DateTime  @updatedAt
            }

            model Feature {
              id        String    @id @default(cuid())
              name      String
              status    String    @default("pending")
              branch    String
              projectId String
              project   Project   @relation(fields: [projectId], references: [id])
              phases    Phase[]
              createdAt DateTime  @default(now())
              updatedAt DateTime  @updatedAt
            }

            model Phase {
              id         String   @id @default(cuid())
              name       String
              order      Int
              status     String   @default("pending")
              featureId  String
              feature    Feature  @relation(fields: [featureId], references: [id])
              tasks      Task[]
              createdAt  DateTime @default(now())
              updatedAt  DateTime @updatedAt
            }

            model Task {
              id           String    @id @default(cuid())
              taskId       String    @unique
              title        String
              description  String?
              type         String
              category     String
              status       String    @default("pending")
              phaseId      String
              phase        Phase     @relation(fields: [phaseId], references: [id])
              metadata     Json?
              commands     Json?
              validation   Json?
              dependencies Json?
              output       String?
              error        String?
              startedAt    DateTime?
              completedAt  DateTime?
              createdAt    DateTime  @default(now())
              updatedAt    DateTime  @updatedAt
            }

# Phase 2: Domain Layer
domain:
  tasks:
    - id: "D001"
      title: "Create domain models"
      files:
        - path: "clean-task-manager/app/domain/models/project.ts"
          content: |
            /**
             * Project model for Clean Architecture templates
             */
            export type ProjectModel = {
              id: string
              name: string
              type: 'backend' | 'frontend' | 'fullstack' | 'cli' | 'library'
              description?: string
              techStack: TechStack
              features: FeatureModel[]
              createdAt: Date
              updatedAt: Date
            }

            export type TechStack = {
              runtime: string
              framework: string
              language: string
              database?: string
              cache?: string
              auth?: string
            }

        - path: "clean-task-manager/app/domain/models/feature.ts"
          content: |
            /**
             * Feature model representing a project feature
             */
            export type FeatureModel = {
              id: string
              name: string
              status: 'pending' | 'in_progress' | 'completed' | 'blocked'
              branch: string
              projectId: string
              phases: PhaseModel[]
              createdAt: Date
              updatedAt: Date
            }

        - path: "clean-task-manager/app/domain/models/phase.ts"
          content: |
            /**
             * Phase model for feature implementation
             */
            export type PhaseModel = {
              id: string
              name: string
              order: number
              status: 'pending' | 'in_progress' | 'completed'
              featureId: string
              tasks: TaskModel[]
              createdAt: Date
              updatedAt: Date
            }

        - path: "clean-task-manager/app/domain/models/task.ts"
          content: |
            /**
             * Task model for execution
             */
            export type TaskModel = {
              id: string
              taskId: string
              title: string
              description?: string
              type: 'implementation' | 'test' | 'git' | 'validation' | 'research'
              category: string
              status: 'pending' | 'running' | 'completed' | 'failed' | 'skipped'
              phaseId: string
              metadata?: TaskMetadata
              commands?: TaskCommand[]
              validation?: TaskValidation[]
              dependencies?: string[]
              output?: string
              error?: string
              startedAt?: Date
              completedAt?: Date
              createdAt: Date
              updatedAt: Date
            }

            export type TaskMetadata = {
              estimatedTime?: string
              canParallel?: boolean
              requiresReview?: boolean
              priority?: 'low' | 'medium' | 'high'
            }

            export type TaskCommand = {
              id: string
              type: 'bash' | 'npm' | 'git' | 'create_file'
              command?: string
              path?: string
              content?: string
              expectedOutput?: string
              onError?: 'abort' | 'continue' | 'retry'
            }

            export type TaskValidation = {
              id: string
              type: 'file_exists' | 'command' | 'test_passes'
              path?: string
              command?: string
              expected: boolean | string | number
            }

        - path: "clean-task-manager/app/domain/models/index.ts"
          content: |
            export * from './project'
            export * from './feature'
            export * from './phase'
            export * from './task'

    - id: "D002"
      title: "Create use case interfaces"
      files:
        - path: "clean-task-manager/app/domain/usecases/parse-yaml.ts"
          content: |
            import { ProjectModel } from '@/domain/models'

            /**
             * Parse YAML content into Project model
             */
            export interface ParseYaml {
              parse: (content: string) => Promise<ParseYaml.Result>
            }

            export namespace ParseYaml {
              export type Params = {
                content: string
                validate?: boolean
              }
              
              export type Result = ProjectModel | null
            }

        - path: "clean-task-manager/app/domain/usecases/execute-task.ts"
          content: |
            import { TaskModel } from '@/domain/models'

            /**
             * Execute a single task
             */
            export interface ExecuteTask {
              execute: (task: ExecuteTask.Params) => Promise<ExecuteTask.Result>
            }

            export namespace ExecuteTask {
              export type Params = {
                task: TaskModel
                dryRun?: boolean
              }
              
              export type Result = {
                success: boolean
                output?: string
                error?: string
                duration: number
              }
            }

        - path: "clean-task-manager/app/domain/usecases/generate-prompt.ts"
          content: |
            import { TaskModel } from '@/domain/models'

            /**
             * Generate Claude Code prompt from selected tasks
             */
            export interface GeneratePrompt {
              generate: (params: GeneratePrompt.Params) => Promise<GeneratePrompt.Result>
            }

            export namespace GeneratePrompt {
              export type Params = {
                tasks: TaskModel[]
                modifications?: Record<string, any>
                template?: string
              }
              
              export type Result = {
                prompt: string
                taskCount: number
              }
            }

# Phase 3: Presentation Layer - Components
presentation:
  tasks:
    - id: "P001"
      title: "Create TaskManager main component"
      files:
        - path: "clean-task-manager/app/presentation/components/task-manager/index.tsx"
          content: |
            'use client'

            import { useState, useEffect } from 'react'
            import { Card } from '@/components/ui/card'
            import { Button } from '@/components/ui/button'
            import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs'
            import { useToast } from '@/components/ui/use-toast'
            import { PhaseSelector } from '../phase-selector'
            import { TaskList } from '../task-list'
            import { ExecutionLog } from '../execution-log'
            import { PromptDialog } from '../prompt-dialog'
            import { ValidationPanel } from '../validation-panel'
            import { useTaskManager } from '@/presentation/hooks/use-task-manager'
            import { Play, Sparkles, Shield, Save, RefreshCw } from 'lucide-react'

            export function TaskManager() {
              const { toast } = useToast()
              const {
                project,
                selectedTasks,
                isExecuting,
                executionLogs,
                activePhase,
                setActivePhase,
                toggleTaskSelection,
                executeSelectedTasks,
                generatePrompt,
                runValidation,
                saveProject
              } = useTaskManager()

              const [showPromptDialog, setShowPromptDialog] = useState(false)
              const [generatedPrompt, setGeneratedPrompt] = useState('')

              const handleGeneratePrompt = async () => {
                const prompt = await generatePrompt()
                setGeneratedPrompt(prompt)
                setShowPromptDialog(true)
              }

              const handleExecute = async () => {
                try {
                  await executeSelectedTasks()
                  toast({
                    title: 'Tasks Executed',
                    description: `Successfully executed ${selectedTasks.size} tasks`
                  })
                } catch (error) {
                  toast({
                    title: 'Execution Failed',
                    description: error.message,
                    variant: 'destructive'
                  })
                }
              }

              if (!project) {
                return (
                  <Card className="p-8 text-center">
                    <p className="text-muted-foreground">No project loaded</p>
                  </Card>
                )
              }

              return (
                <div className="space-y-6">
                  {/* Header */}
                  <Card className="p-6">
                    <div className="flex justify-between items-center">
                      <div>
                        <h1 className="text-3xl font-bold">{project.name}</h1>
                        <p className="text-muted-foreground mt-1">
                          {project.description}
                        </p>
                      </div>
                      
                      <div className="flex gap-2">
                        <Button
                          onClick={handleGeneratePrompt}
                          disabled={selectedTasks.size === 0}
                          variant="secondary"
                        >
                          <Sparkles className="w-4 h-4 mr-2" />
                          Generate Prompt
                        </Button>
                        
                        <Button
                          onClick={handleExecute}
                          disabled={selectedTasks.size === 0 || isExecuting}
                        >
                          {isExecuting ? (
                            <>
                              <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                              Executing...
                            </>
                          ) : (
                            <>
                              <Play className="w-4 h-4 mr-2" />
                              Execute Tasks
                            </>
                          )}
                        </Button>
                        
                        <Button
                          onClick={runValidation}
                          variant="outline"
                        >
                          <Shield className="w-4 h-4 mr-2" />
                          Validate
                        </Button>
                        
                        <Button
                          onClick={saveProject}
                          variant="outline"
                        >
                          <Save className="w-4 h-4 mr-2" />
                          Save
                        </Button>
                      </div>
                    </div>
                  </Card>

                  {/* Main Content */}
                  <div className="grid grid-cols-12 gap-6">
                    {/* Left Sidebar */}
                    <div className="col-span-3 space-y-6">
                      <PhaseSelector
                        phases={project.features[0]?.phases || []}
                        activePhase={activePhase}
                        onPhaseSelect={setActivePhase}
                      />
                      
                      <ValidationPanel />
                    </div>

                    {/* Center Content */}
                    <div className="col-span-6">
                      <TaskList
                        tasks={
                          project.features[0]?.phases
                            .find(p => p.id === activePhase)?.tasks || []
                        }
                        selectedTasks={selectedTasks}
                        onTaskSelect={toggleTaskSelection}
                      />
                    </div>

                    {/* Right Sidebar */}
                    <div className="col-span-3">
                      <ExecutionLog logs={executionLogs} />
                    </div>
                  </div>

                  {/* Prompt Dialog */}
                  <PromptDialog
                    open={showPromptDialog}
                    onOpenChange={setShowPromptDialog}
                    prompt={generatedPrompt}
                  />
                </div>
              )
            }

    - id: "P002"
      title: "Create TaskList component"
      files:
        - path: "clean-task-manager/app/presentation/components/task-list/index.tsx"
          content: |
            'use client'

            import { TaskModel } from '@/domain/models'
            import { Card } from '@/components/ui/card'
            import { Checkbox } from '@/components/ui/checkbox'
            import { Badge } from '@/components/ui/badge'
            import { Button } from '@/components/ui/button'
            import { ScrollArea } from '@/components/ui/scroll-area'
            import { Edit2, Check, X, Clock, PlayCircle } from 'lucide-react'
            import { cn } from '@/lib/utils'

            interface TaskListProps {
              tasks: TaskModel[]
              selectedTasks: Set<string>
              onTaskSelect: (taskId: string) => void
            }

            export function TaskList({ tasks, selectedTasks, onTaskSelect }: TaskListProps) {
              const getStatusIcon = (status: string) => {
                switch (status) {
                  case 'completed':
                    return <Check className="w-4 h-4 text-green-500" />
                  case 'failed':
                    return <X className="w-4 h-4 text-red-500" />
                  case 'running':
                    return <PlayCircle className="w-4 h-4 text-blue-500 animate-pulse" />
                  default:
                    return <Clock className="w-4 h-4 text-gray-400" />
                }
              }

              const getStatusColor = (status: string) => {
                switch (status) {
                  case 'completed':
                    return 'bg-green-500/10 text-green-500'
                  case 'failed':
                    return 'bg-red-500/10 text-red-500'
                  case 'running':
                    return 'bg-blue-500/10 text-blue-500'
                  default:
                    return 'bg-gray-500/10 text-gray-500'
                }
              }

              return (
                <Card className="p-6">
                  <div className="flex justify-between items-center mb-4">
                    <h2 className="text-xl font-semibold">Tasks</h2>
                    <Badge variant="outline">
                      {selectedTasks.size} selected
                    </Badge>
                  </div>

                  <ScrollArea className="h-[600px]">
                    <div className="space-y-3">
                      {tasks.map((task) => (
                        <Card
                          key={task.id}
                          className={cn(
                            "p-4 transition-all",
                            selectedTasks.has(task.taskId) && "ring-2 ring-primary"
                          )}
                        >
                          <div className="flex items-start gap-3">
                            <Checkbox
                              checked={selectedTasks.has(task.taskId)}
                              onCheckedChange={() => onTaskSelect(task.taskId)}
                              className="mt-1"
                            />

                            <div className="flex-1">
                              <div className="flex items-center gap-2 mb-1">
                                <span className="font-mono text-sm text-muted-foreground">
                                  {task.taskId}
                                </span>
                                {getStatusIcon(task.status)}
                              </div>

                              <h3 className="font-medium mb-2">{task.title}</h3>
                              
                              {task.description && (
                                <p className="text-sm text-muted-foreground mb-3">
                                  {task.description}
                                </p>
                              )}

                              <div className="flex gap-2">
                                <Badge variant="secondary">{task.type}</Badge>
                                <Badge variant="secondary">{task.category}</Badge>
                                <Badge className={getStatusColor(task.status)}>
                                  {task.status}
                                </Badge>
                                {task.metadata?.priority && (
                                  <Badge variant="outline">
                                    {task.metadata.priority}
                                  </Badge>
                                )}
                              </div>
                            </div>

                            <Button size="icon" variant="ghost">
                              <Edit2 className="w-4 h-4" />
                            </Button>
                          </div>
                        </Card>
                      ))}
                    </div>
                  </ScrollArea>
                </Card>
              )
            }

    - id: "P003"
      title: "Create hooks"
      files:
        - path: "clean-task-manager/app/presentation/hooks/use-task-manager.ts"
          content: |
            'use client'

            import { useState, useCallback, useEffect } from 'react'
            import { ProjectModel, TaskModel } from '@/domain/models'
            import { useToast } from '@/components/ui/use-toast'

            export interface LogEntry {
              id: string
              type: 'info' | 'success' | 'error' | 'warning'
              message: string
              timestamp: Date
            }

            export function useTaskManager() {
              const { toast } = useToast()
              const [project, setProject] = useState<ProjectModel | null>(null)
              const [selectedTasks, setSelectedTasks] = useState<Set<string>>(new Set())
              const [isExecuting, setIsExecuting] = useState(false)
              const [executionLogs, setExecutionLogs] = useState<LogEntry[]>([])
              const [activePhase, setActivePhase] = useState<string>('')

              // Load project from YAML
              useEffect(() => {
                loadProject()
              }, [])

              const loadProject = async () => {
                try {
                  const response = await fetch('/api/projects')
                  const data = await response.json()
                  setProject(data)
                  if (data?.features?.[0]?.phases?.[0]) {
                    setActivePhase(data.features[0].phases[0].id)
                  }
                } catch (error) {
                  toast({
                    title: 'Failed to load project',
                    description: error.message,
                    variant: 'destructive'
                  })
                }
              }

              const toggleTaskSelection = useCallback((taskId: string) => {
                setSelectedTasks(prev => {
                  const newSet = new Set(prev)
                  if (newSet.has(taskId)) {
                    newSet.delete(taskId)
                  } else {
                    newSet.add(taskId)
                  }
                  return newSet
                })
              }, [])

              const addLog = useCallback((type: LogEntry['type'], message: string) => {
                setExecutionLogs(prev => [...prev, {
                  id: Date.now().toString(),
                  type,
                  message,
                  timestamp: new Date()
                }])
              }, [])

              const executeSelectedTasks = useCallback(async () => {
                setIsExecuting(true)
                const taskIds = Array.from(selectedTasks)
                
                for (const taskId of taskIds) {
                  addLog('info', `Executing task ${taskId}...`)
                  
                  try {
                    const response = await fetch('/api/tasks/execute', {
                      method: 'POST',
                      headers: { 'Content-Type': 'application/json' },
                      body: JSON.stringify({ taskId })
                    })
                    
                    if (!response.ok) throw new Error('Execution failed')
                    
                    addLog('success', `Task ${taskId} completed`)
                  } catch (error) {
                    addLog('error', `Task ${taskId} failed: ${error.message}`)
                  }
                }
                
                setIsExecuting(false)
                setSelectedTasks(new Set())
              }, [selectedTasks, addLog])

              const generatePrompt = useCallback(async () => {
                const taskIds = Array.from(selectedTasks)
                const response = await fetch('/api/tasks/prompt', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ taskIds })
                })
                const data = await response.json()
                return data.prompt
              }, [selectedTasks])

              const runValidation = useCallback(async () => {
                addLog('info', 'Running validation...')
                
                const response = await fetch('/api/validation', {
                  method: 'POST',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify({ projectId: project?.id })
                })
                
                const results = await response.json()
                
                results.forEach((result: any) => {
                  addLog(
                    result.passed ? 'success' : 'error',
                    `${result.name}: ${result.message}`
                  )
                })
              }, [project, addLog])

              const saveProject = useCallback(async () => {
                const response = await fetch('/api/projects', {
                  method: 'PUT',
                  headers: { 'Content-Type': 'application/json' },
                  body: JSON.stringify(project)
                })
                
                if (response.ok) {
                  toast({ title: 'Project saved successfully' })
                }
              }, [project, toast])

              return {
                project,
                selectedTasks,
                isExecuting,
                executionLogs,
                activePhase,
                setActivePhase,
                toggleTaskSelection,
                executeSelectedTasks,
                generatePrompt,
                runValidation,
                saveProject
              }
            }

# Phase 4: App Pages
pages:
  tasks:
    - id: "PG001"
      title: "Create main layout"
      files:
        - path: "clean-task-manager/app/layout.tsx"
          content: |
            import type { Metadata } from 'next'
            import { Inter } from 'next/font/google'
            import './globals.css'
            import { Toaster } from '@/components/ui/toaster'

            const inter = Inter({ subsets: ['latin'] })

            export const metadata: Metadata = {
              title: 'Clean Task Manager',
              description: 'Manage Clean Architecture tasks visually',
            }

            export default function RootLayout({
              children,
            }: {
              children: React.ReactNode
            }) {
              return (
                <html lang="en" className="dark">
                  <body className={inter.className}>
                    <div className="min-h-screen bg-background">
                      {children}
                    </div>
                    <Toaster />
                  </body>
                </html>
              )
            }

        - path: "clean-task-manager/app/page.tsx"
          content: |
            import { TaskManager } from '@/presentation/components/task-manager'

            export default function HomePage() {
              return (
                <main className="container mx-auto py-8">
                  <TaskManager />
                </main>
              )
            }

    - id: "PG002"
      title: "Create API routes"
      files:
        - path: "clean-task-manager/app/api/projects/route.ts"
          content: |
            import { NextRequest, NextResponse } from 'next/server'
            import { readFile, writeFile } from 'fs/promises'
            import { parse, stringify } from 'yaml'
            import path from 'path'

            export async function GET() {
              try {
                const yamlPath = path.join(process.cwd(), 'templates', 'project.yaml')
                const content = await readFile(yamlPath, 'utf-8')
                const project = parse(content)
                
                return NextResponse.json(project)
              } catch (error) {
                return NextResponse.json(
                  { error: 'Failed to load project' },
                  { status: 500 }
                )
              }
            }

            export async function PUT(request: NextRequest) {
              try {
                const project = await request.json()
                const yamlPath = path.join(process.cwd(), 'templates', 'project.yaml')
                const content = stringify(project)
                
                await writeFile(yamlPath, content, 'utf-8')
                
                return NextResponse.json({ success: true })
              } catch (error) {
                return NextResponse.json(
                  { error: 'Failed to save project' },
                  { status: 500 }
                )
              }
            }

        - path: "clean-task-manager/app/api/tasks/execute/route.ts"
          content: |
            import { NextRequest, NextResponse } from 'next/server'
            import { exec } from 'child_process'
            import { promisify } from 'util'

            const execAsync = promisify(exec)

            export async function POST(request: NextRequest) {
              try {
                const { taskId } = await request.json()
                
                // Here you would load the task and execute its commands
                // This is a simplified example
                const result = await execAsync('echo "Task executed"')
                
                return NextResponse.json({
                  success: true,
                  output: result.stdout,
                  taskId
                })
              } catch (error) {
                return NextResponse.json(
                  { error: error.message },
                  { status: 500 }
                )
              }
            }

# Phase 5: Final Setup
final:
  tasks:
    - id: "F001"
      title: "Create example YAML template"
      files:
        - path: "clean-task-manager/templates/project.yaml"
          content: |
            project:
              name: "Example Project"
              type: "backend"
              description: "Clean Architecture API"
              techStack:
                runtime: "node:22"
                framework: "express"
                language: "typescript"
                database: "postgresql"
            
            features:
              - id: "001"
                name: "authentication"
                status: "pending"
                branch: "001-authentication"
                phases:
                  - id: "domain"
                    name: "Domain Layer"
                    order: 1
                    status: "pending"
                    tasks:
                      - taskId: "T001"
                        title: "Create User model"
                        type: "implementation"
                        category: "model"
                        status: "pending"
                        metadata:
                          estimatedTime: "5min"
                          priority: "high"

    - id: "F002"
      title: "Setup environment variables"
      files:
        - path: "clean-task-manager/.env.local"
          content: |
            DATABASE_URL="postgresql://user:password@localhost:5432/taskmanager"
            NODE_ENV="development"

    - id: "F003"
      title: "Update package.json scripts"
      commands:
        - |
          cd clean-task-manager && npm pkg set scripts.dev="next dev"
          cd clean-task-manager && npm pkg set scripts.build="next build"
          cd clean-task-manager && npm pkg set scripts.start="next start"
          cd clean-task-manager && npm pkg set scripts.lint="next lint"
          cd clean-task-manager && npm pkg set scripts.db:push="prisma db push"
          cd clean-task-manager && npm pkg set scripts.db:studio="prisma studio"

    - id: "F004"
      title: "Initialize database"
      commands:
        - "cd clean-task-manager && npx prisma db push"

    - id: "F005"
      title: "Run development server"
      commands:
        - "cd clean-task-manager && npm run dev"
      notes: "Application will be available at http://localhost:3000"

# Execution instructions for Claude Code
execution:
  instructions: |
    Execute this YAML to create the Clean Task Manager project:
    
    1. Run all setup tasks (S001-S005)
    2. Create domain layer files (D001-D002)
    3. Create presentation components (P001-P003)
    4. Create app pages and API routes (PG001-PG002)
    5. Final setup and run (F001-F005)
    
    The application will:
    - Load YAML templates and display tasks visually
    - Allow task selection and modification
    - Generate prompts for Claude Code
    - Execute tasks locally with real-time feedback
    - Validate and commit changes automatically
    
    Tech stack:
    - Next.js 15 with App Router
    - TypeScript
    - Tailwind CSS + Shadcn UI
    - Prisma + PostgreSQL
    - Clean Architecture (Domain/Data/Infra/Presentation)
    - Context API for state management