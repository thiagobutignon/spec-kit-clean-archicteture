# ============= BEGIN DATA STEPS FRONTEND SECTION =============

  # ------------------------------------------------------------------------------
  # AI-NOTE: DATA LAYER IMPLEMENTATION STEPS FOR FRONTEND (TDD)
  # Simplified to match actual codebase patterns - no over-engineering
  # Based on real code: RemoteAuthentication, RemoteLoadSurveyList patterns
  # ------------------------------------------------------------------------------

  data_steps:
    # === STEP 1: CREATE FEATURE BRANCH ===
    - id: 'create-feature-branch-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Create feature branch for __USE_CASE_NAME_PASCAL_CASE__ frontend data layer implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'GIT_WORKFLOW.md'
          description: 'Following Git Flow pattern for feature development.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'git workflow feature branch naming conventions'
          url: 'https://github.com/...'
          description: 'Git Flow and feature branch best practices.'
      run_scripts:
        description: 'Create and checkout feature branch for data layer development'
        scripts:
          - name: 'Create feature branch'
            command: 'git checkout -b feat/__FEATURE_NAME_KEBAB_CASE__-data-__USE_CASE_NAME_KEBAB_CASE__-frontend'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Push feature branch'
            command: 'git push -u origin feat/__FEATURE_NAME_KEBAB_CASE__-data-__USE_CASE_NAME_KEBAB_CASE__-frontend'
            workingDirectory: '__PROJECT_NAME__'

    # === STEP 2: CREATE DATA STRUCTURE ===
    - id: 'create-data-structure-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'folder'
      description: 'Create data layer folder structure for __USE_CASE_NAME_PASCAL_CASE__ frontend use case'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'FRONTEND_ARCHITECTURE.md'
          description: 'Following Clean Architecture data layer structure for frontend.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'clean architecture data layer frontend typescript'
          url: 'https://github.com/...'
          description: 'Data layer patterns for frontend with simple Remote implementations.'
      action:
        create_folders:
          basePath: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data'
          folders:
            - 'usecases'     # Use case implementations (Remote prefix)

    # === STEP 3: CREATE FAILING TESTS (RED PHASE) ===
    - id: 'create-data-failing-tests-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'create_file'
      description: 'Create failing tests for Remote__USE_CASE_NAME_PASCAL_CASE__ data implementation (RED)'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_code_analysis'
          source: 'serena'
          description: 'Following existing test patterns from RemoteAuthentication and RemoteLoadSurveyList.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'test driven development vitest typescript'
          url: 'https://github.com/...'
          description: 'TDD patterns with Vitest for TypeScript.'
      path: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data/usecases/remote-__USE_CASE_NAME_KEBAB_CASE__.spec.ts'
      template: |
        import { describe, it, expect, beforeEach, vi } from 'vitest'
        import { HttpClient, HttpStatusCode } from '@/data/protocols/http'
        import { Remote__USE_CASE_NAME_PASCAL_CASE__ } from './remote-__USE_CASE_NAME_KEBAB_CASE__'
        import type { __USE_CASE_NAME_PASCAL_CASE__ } from '../../domain/usecases/__USE_CASE_NAME_KEBAB_CASE__'
        import { UnexpectedError } from '@/domain/errors'

        /**
         * TDD Tests for Remote__USE_CASE_NAME_PASCAL_CASE__ - Following real codebase patterns
         * Simple tests matching RemoteAuthentication/RemoteLoadSurveyList style
         */
        describe('Remote__USE_CASE_NAME_PASCAL_CASE__', () => {
          let sut: Remote__USE_CASE_NAME_PASCAL_CASE__
          let url: string
          let httpClientSpy: HttpClient

          beforeEach(() => {
            url = 'any_url'
            httpClientSpy = {
              request: vi.fn()
            }
            sut = new Remote__USE_CASE_NAME_PASCAL_CASE__(url, httpClientSpy)
          })

          describe('RED Phase - These should FAIL initially', () => {
            it('should call HttpClient with correct values', async () => {
              const params = {
                __INPUT_FIELD_1__: 'any_value_1',
                __INPUT_FIELD_2__: 'any_value_2'
              }

              vi.spyOn(httpClientSpy, 'request').mockResolvedValueOnce({
                statusCode: HttpStatusCode.ok,
                body: 'any_body'
              })

              await sut.__USE_CASE_METHOD_NAME__(params)

              expect(httpClientSpy.request).toHaveBeenCalledWith({
                url: 'any_url',
                method: 'post',
                body: params
              })
            })

            it('should return correct data on HttpStatusCode.ok', async () => {
              const httpResult = {
                __OUTPUT_FIELD_1__: 'any_value_1',
                __OUTPUT_FIELD_2__: 'any_value_2'
              }

              vi.spyOn(httpClientSpy, 'request').mockResolvedValueOnce({
                statusCode: HttpStatusCode.ok,
                body: httpResult
              })

              const result = await sut.__USE_CASE_METHOD_NAME__({
                __INPUT_FIELD_1__: 'any_input_1',
                __INPUT_FIELD_2__: 'any_input_2'
              })

              expect(result).toEqual(httpResult)
            })

            it('should throw UnexpectedError on HttpStatusCode.serverError', async () => {
              vi.spyOn(httpClientSpy, 'request').mockResolvedValueOnce({
                statusCode: HttpStatusCode.serverError,
                body: 'any_body'
              })

              const promise = sut.__USE_CASE_METHOD_NAME__({
                __INPUT_FIELD_1__: 'any_input_1',
                __INPUT_FIELD_2__: 'any_input_2'
              })

              await expect(promise).rejects.toThrow(new UnexpectedError())
            })

            it('should throw UnexpectedError on HttpStatusCode.notFound', async () => {
              vi.spyOn(httpClientSpy, 'request').mockResolvedValueOnce({
                statusCode: HttpStatusCode.notFound,
                body: 'any_body'
              })

              const promise = sut.__USE_CASE_METHOD_NAME__({
                __INPUT_FIELD_1__: 'any_input_1',
                __INPUT_FIELD_2__: 'any_input_2'
              })

              await expect(promise).rejects.toThrow(new UnexpectedError())
            })
          })
        })


    # === STEP 4: CREATE DATA IMPLEMENTATION (GREEN PHASE) ===
    - id: 'create-data-implementation-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'create_file'
      description: 'Create Remote__USE_CASE_NAME_PASCAL_CASE__ implementation following real codebase patterns (GREEN)'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_code_analysis'
          source: 'serena'
          description: 'Following RemoteAuthentication and RemoteLoadSurveyList patterns.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'clean architecture use case implementation'
          url: 'https://github.com/...'
          description: 'Simple use case implementation patterns without over-engineering.'
      path: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data/usecases/remote-__USE_CASE_NAME_KEBAB_CASE__.ts'
      template: |
        import { HttpClient, HttpStatusCode } from '@/data/protocols/http'
        import { UnexpectedError } from '@/domain/errors'
        import type { __USE_CASE_NAME_PASCAL_CASE__ } from '../../domain/usecases/__USE_CASE_NAME_KEBAB_CASE__'

        /**
         * Remote implementation of __USE_CASE_NAME_PASCAL_CASE__ use case
         * Following the exact pattern of RemoteAuthentication and RemoteLoadSurveyList
         */
        export class Remote__USE_CASE_NAME_PASCAL_CASE__ implements __USE_CASE_NAME_PASCAL_CASE__ {
          constructor(
            private readonly url: string,
            private readonly httpClient: HttpClient<Remote__USE_CASE_NAME_PASCAL_CASE__.Model>
          ) {}

          async __USE_CASE_METHOD_NAME__(params: __USE_CASE_NAME_PASCAL_CASE__.Params): Promise<__USE_CASE_NAME_PASCAL_CASE__.Model> {
            const httpResponse = await this.httpClient.request({
              url: this.url,
              method: 'post',
              body: params
            })

            switch (httpResponse.statusCode) {
              case HttpStatusCode.ok: return httpResponse.body
              case HttpStatusCode.forbidden: throw new AccessDeniedError()
              case HttpStatusCode.unauthorized: throw new InvalidCredentialsError()
              default: throw new UnexpectedError()
            }
          }
        }

        export namespace Remote__USE_CASE_NAME_PASCAL_CASE__ {
          export type Model = __USE_CASE_NAME_PASCAL_CASE__.Model
        }

    # === STEP 5: RUN PASSING TESTS (GREEN PHASE) ===
    - id: 'run-passing-tests-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Verify all tests pass with implementation (GREEN phase)'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'external_pattern'
          source: 'context7'
          query: 'test driven development green phase'
          url: 'https://github.com/...'
          description: 'TDD Green phase - making tests pass.'
      run_scripts:
        description: 'Run tests to verify GREEN phase completion'
        scripts:
          - name: 'Run passing tests'
            command: 'npm run test -- src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data --coverage'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Commit GREEN phase'
            command: 'git add . && git commit -m "feat(__FEATURE_NAME_KEBAB_CASE__): implement __USE_CASE_NAME_KEBAB_CASE__ data layer (GREEN)"'
            workingDirectory: '__PROJECT_NAME__'

    # === STEP 6: REFACTOR IMPLEMENTATION (REFACTOR PHASE) ===
    - id: 'refactor-data-implementation-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'create_file'
      description: 'Refactor Remote__USE_CASE_NAME_PASCAL_CASE__ for specific domain needs (REFACTOR)'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'external_pattern'
          source: 'context7'
          query: 'test driven development refactor phase'
          url: 'https://github.com/...'
          description: 'TDD Refactor phase - improving code without breaking tests.'
      path: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data/usecases/remote-__USE_CASE_NAME_KEBAB_CASE__.ts'
      template: |
        import { HttpClient, HttpStatusCode } from '@/data/protocols/http'
        import { UnexpectedError, AccessDeniedError, InvalidCredentialsError } from '@/domain/errors'
        import type { __USE_CASE_NAME_PASCAL_CASE__ } from '../../domain/usecases/__USE_CASE_NAME_KEBAB_CASE__'

        /**
         * Remote implementation of __USE_CASE_NAME_PASCAL_CASE__ use case
         * Refactored version with domain-specific logic and data transformations
         */
        export class Remote__USE_CASE_NAME_PASCAL_CASE__ implements __USE_CASE_NAME_PASCAL_CASE__ {
          constructor(
            private readonly url: string,
            private readonly httpClient: HttpClient<Remote__USE_CASE_NAME_PASCAL_CASE__.Model>
          ) {}

          async __USE_CASE_METHOD_NAME__(params: __USE_CASE_NAME_PASCAL_CASE__.Params): Promise<__USE_CASE_NAME_PASCAL_CASE__.Model> {
            const httpResponse = await this.httpClient.request({
              url: this.url,
              method: 'post',
              body: params
            })

            const remoteData = httpResponse.body || {}

            switch (httpResponse.statusCode) {
              case HttpStatusCode.ok: return this.adapt(remoteData)
              case HttpStatusCode.noContent: return this.getDefaultResponse()
              case HttpStatusCode.forbidden: throw new AccessDeniedError()
              case HttpStatusCode.unauthorized: throw new InvalidCredentialsError()
              default: throw new UnexpectedError()
            }
          }

          private adapt(remoteData: Remote__USE_CASE_NAME_PASCAL_CASE__.Model): __USE_CASE_NAME_PASCAL_CASE__.Model {
            return {
              __OUTPUT_FIELD_1__: remoteData.__OUTPUT_FIELD_1__,
              __OUTPUT_FIELD_2__: remoteData.__OUTPUT_FIELD_2__,
              __TIMESTAMP_FIELD__: new Date(remoteData.__TIMESTAMP_FIELD__)
            }
          }

          private getDefaultResponse(): __USE_CASE_NAME_PASCAL_CASE__.Model {
            return {
              __OUTPUT_FIELD_1__: '',
              __OUTPUT_FIELD_2__: '',
              __TIMESTAMP_FIELD__: new Date()
            }
          }
        }

        export namespace Remote__USE_CASE_NAME_PASCAL_CASE__ {
          export type Model = {
            __OUTPUT_FIELD_1__: string
            __OUTPUT_FIELD_2__: string
            __TIMESTAMP_FIELD__: string
          }
        }

    # === STEP 7: FINAL VALIDATION (REFACTOR PHASE) ===
    - id: 'validate-refactored-implementation-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Run all tests and validations after refactoring (REFACTOR phase complete)'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'TESTING_STRATEGY.md'
          description: 'Complete test coverage and validation requirements.'
      run_scripts:
        description: 'Complete TDD cycle validation and commit refactored code'
        scripts:
          - name: 'Run all data layer tests'
            command: 'npm run test -- src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data --coverage --reporter=verbose'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'TypeScript compilation check'
            command: 'npx tsc --noEmit --project tsconfig.json'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'ESLint validation'
            command: 'npm run lint -- src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Commit refactored implementation'
            command: 'git add . && git commit -m "refactor(__FEATURE_NAME_KEBAB_CASE__): improve __USE_CASE_NAME_KEBAB_CASE__ data layer design (REFACTOR)"'
            workingDirectory: '__PROJECT_NAME__'

    # === STEP 8: VALIDATE COMPLETE DATA LAYER ===
    - id: 'validate-complete-data-layer-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Final validation of complete frontend data layer implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'CI_CD.md'
          description: 'Following CI/CD validation requirements.'
      run_scripts:
        description: 'Run comprehensive validation of frontend data layer'
        scripts:
          - name: 'Complete test suite'
            command: 'npm run test -- src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data --coverage --run'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'TypeScript strict compilation'
            command: 'npx tsc --noEmit --strict --project tsconfig.json'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'ESLint with strict rules'
            command: 'npm run lint -- src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data --max-warnings 0'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Final commit'
            command: 'git add . && git commit -m "feat(__FEATURE_NAME_KEBAB_CASE__): complete __USE_CASE_NAME_KEBAB_CASE__ frontend data layer with TDD"'
            workingDirectory: '__PROJECT_NAME__'

    # === STEP 9: OPEN PULL REQUEST ===
    - id: 'open-pull-request-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Open Pull Request for frontend data layer implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'GIT_WORKFLOW.md'
          description: 'Pull Request process and review guidelines.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'github pull request best practices'
          url: 'https://github.com/...'
          description: 'Pull request creation and documentation standards.'
      run_scripts:
        description: 'Create pull request with simple, focused description'
        scripts:
          - name: 'Push final changes'
            command: 'git push origin feat/__FEATURE_NAME_KEBAB_CASE__-data-__USE_CASE_NAME_KEBAB_CASE__-frontend'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Create Pull Request'
            command: |
              gh pr create \
                --title "feat(__FEATURE_NAME_KEBAB_CASE__): implement __USE_CASE_NAME_KEBAB_CASE__ frontend data layer" \
                --body "## Summary

              Implements frontend data layer for __USE_CASE_NAME_PASCAL_CASE__ following established codebase patterns.

              ### Implementation Details
              - ✅ Remote__USE_CASE_NAME_PASCAL_CASE__ class following RemoteAuthentication pattern
              - ✅ Uses existing HttpClient from @/data/protocols/http
              - ✅ Simple switch case error handling
              - ✅ Namespace types pattern (__USE_CASE_NAME_PASCAL_CASE__.Params, __USE_CASE_NAME_PASCAL_CASE__.Model)
              - ✅ TDD methodology (RED-GREEN-REFACTOR)

              ### Files Added
              - src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data/usecases/remote-__USE_CASE_NAME_KEBAB_CASE__.ts
              - src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data/usecases/remote-__USE_CASE_NAME_KEBAB_CASE__.spec.ts

              ### Testing
              - Unit tests with mocked HttpClient
              - Complete status code coverage
              - Following existing test patterns

              Follows the exact same patterns as RemoteAuthentication and RemoteLoadSurveyList." \
                --draft
            workingDirectory: '__PROJECT_NAME__'

    # === STEP 10: AI CODE REVIEW ===
    - id: 'ai-code-review-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'AI-powered code review focusing on pattern consistency'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'AI_CODE_REVIEW.md'
          description: 'AI review patterns and quality gates.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'automated code review ai patterns'
          url: 'https://github.com/...'
          description: 'AI-powered code review best practices.'
      ai_review_prompts:
        pattern_consistency: |
          Please review this Remote__USE_CASE_NAME_PASCAL_CASE__ implementation for consistency with existing codebase patterns:

          Compare with:
          - RemoteAuthentication (src/data/usecases/remote-authentication.ts)
          - RemoteLoadSurveyList (src/data/usecases/remote-load-survey-list.ts)

          Check:
          1. Constructor pattern (url + httpClient)
          2. Method naming (domain-specific, not generic execute)
          3. HttpClient usage from @/data/protocols/http
          4. Switch case error handling
          5. Namespace types pattern
          6. Simple, direct implementation (no over-engineering)

          Verify it matches the established 25-30 line pattern, not complex implementations.

    # === STEP 11: CLEANUP AND MERGE ===
    - id: 'cleanup-and-merge-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Final cleanup and merge frontend data layer implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'GIT_WORKFLOW.md'
          description: 'Merge process and branch cleanup.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'git merge squash cleanup'
          url: 'https://github.com/...'
          description: 'Git merge strategies and branch cleanup.'
      run_scripts:
        description: 'Complete PR merge and cleanup process'
        scripts:
          - name: 'Final validation'
            command: 'npm run validate:all -- src/features/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__/data'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Merge Pull Request'
            command: 'gh pr merge --squash --delete-branch'
            workingDirectory: '__PROJECT_NAME__'
          - name: 'Cleanup'
            command: 'git checkout main && git pull origin main && git branch -d feat/__FEATURE_NAME_KEBAB_CASE__-data-__USE_CASE_NAME_KEBAB_CASE__-frontend'
            workingDirectory: '__PROJECT_NAME__'

  # ------------------------------------------------------------------------------
  # BROWNFIELD REFACTORING STEPS (OPTIONAL)
  # For existing projects that need to adapt to Clean Architecture patterns
  # ------------------------------------------------------------------------------

  brownfield_data_steps:
    # === STEP 12: IDENTIFY EXISTING IMPLEMENTATIONS ===
    - id: 'identify-existing-implementations-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'analysis'
      description: 'Identify existing __USE_CASE_NAME_PASCAL_CASE__ implementations to refactor'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'REFACTORING_GUIDE.md'
          description: 'Brownfield refactoring strategies for legacy code.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'refactoring legacy code to clean architecture'
          url: 'https://github.com/...'
          description: 'Strategies for refactoring existing code to Clean Architecture.'
      analysis_script: |
        echo "🔍 Searching for existing implementations..."
        grep -r "__USE_CASE_NAME__\|__USE_CASE_KEYWORD__" --include="*.ts" --include="*.tsx" src/ || true
        echo "📋 Analyzing current architecture patterns..."
        find src/ -name "*__USE_CASE_NAME_KEBAB_CASE__*" -o -name "*__USE_CASE_KEYWORD__*" || true

    # === STEP 13: CREATE ADAPTER LAYER ===
    - id: 'create-adapter-layer-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'create_file'
      description: 'Create adapter to bridge legacy code with new Clean Architecture implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'external_pattern'
          source: 'context7'
          query: 'adapter pattern legacy migration'
          url: 'https://github.com/...'
          description: 'Adapter pattern for legacy system integration.'
      template: |
        /**
         * Legacy adapter for __USE_CASE_NAME_PASCAL_CASE__
         * Bridges existing implementation with new Clean Architecture
         * @deprecated Will be removed once migration is complete
         */
        export class Legacy__USE_CASE_NAME_PASCAL_CASE__Adapter {
          // Bridge between old and new implementations
        }

    # === STEP 14: GRADUAL MIGRATION ===
    - id: 'gradual-migration-__USE_CASE_NAME_KEBAB_CASE__'
      type: 'validation'
      description: 'Implement gradual migration strategy from legacy to Clean Architecture'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'external_pattern'
          source: 'context7'
          query: 'strangler fig pattern refactoring'
          url: 'https://github.com/...'
          description: 'Strangler Fig pattern for gradual system replacement.'
      migration_strategy: |
        1. Identify all consumers of legacy implementation
        2. Create feature flag for gradual rollout
        3. Run both implementations in parallel (shadow mode)
        4. Compare outputs for consistency
        5. Gradually increase traffic to new implementation
        6. Remove legacy code once fully migrated

# ============= END DATA STEPS FRONTEND SECTION =============