version: "1.0.0"

metadata:
  title: "Domain Layer Template"
  description: "Feature-based domain structure template for TypeScript projects with Clean Architecture"
  lastUpdated: "2025-09-15"

structure:
  basePath: "src/"
  folders:
    - name: "features/[feature-name]/domain/errors"
      description: "Feature-specific errors"
      required: true
    - name: "features/[feature-name]/domain/use-cases"
      description: "Feature use case interfaces"
      required: true
    - name: "features/[feature-name]/domain/test"
      description: "Feature test helpers"
      required: true

layerDependencies:
  canImportFromDomain:
    - "Data Layer - Implements the use case interfaces defined in domain"
    - "Presentation Layer - Uses domain types and calls use cases"
    - "Infrastructure Layer - May use domain types for adapters"
    - "Main/Factory Layer - Wires everything together, knows all layers"
    - "Test Files - Can import domain types and interfaces for testing"
  cannotImportFromDomain:
    - "External Libraries - Should never know about your domain"
    - "Node Modules - Third-party code should not depend on domain"
  domainCannotImportFrom:
    - "Any other layer - Domain must be completely independent"
    - "Data Layer - No implementation details"
    - "Presentation Layer - No UI concerns"
    - "Infrastructure Layer - No external dependencies"
    - "Main Layer - No dependency injection logic"
    - "External Libraries - No third-party dependencies"

domainRules:
  allowed:
    - "Simple type definitions (Input/Output types)"
    - "Use case interfaces (contracts only)"
    - "Domain-specific error classes"
    - "Test mock functions"
  forbidden:
    - "Framework dependencies (React, Next.js, Express)"
    - "External libraries (axios, fetch, database clients)"
    - "Implementation details of any kind"
    - "UI components"
    - "HTTP/Database/File system operations"
    - "Environment variables"
    - "Console.log or any I/O operations"
    - "Value objects"
    - "Entities"
    - "Business rules or business logic"
    - "Validation logic"
    - "Calculations or computations"
    - "Any behavior beyond type definitions and interfaces"

features:
  useCases:
    purpose: "Define the business operations/actions available in the system"
    rules:
      should:
        - "Define only interfaces/contracts, not implementations"
        - "Have EXACTLY ONE responsibility (one business operation)"
        - "Do ONE thing and ONE thing only (never multiple operations)"
        - "Return domain types or primitives"
        - "Be named with verbs (CreateUser, AuthenticateUser, etc.)"
        - "Be framework agnostic"
      shouldNot:
        - "Contain implementation logic"
        - "Know about HTTP, databases, or external services"
        - "Import from data, presentation, or infrastructure layers"
        - "Have side effects"
        - "Execute multiple operations (e.g., CreateUserAndSendEmail is wrong, split into two use cases)"
    template: |
      // src/features/[feature-name]/domain/use-cases/[action-entity].ts

      /**
       * Input parameters for [ActionEntity]UseCase
       */
      export type [ActionEntity]Input = {
        // Define your input parameters here
      }

      /**
       * Output type for [ActionEntity]UseCase
       */
      export type [ActionEntity]Output = {
        // Define your output type here
      }

      /**
       * [ActionEntity]UseCase interface
       * @description [Describe ONE specific action this use case performs]
       */
      export interface [ActionEntity]UseCase {
        /**
         * Execute the [action] operation
         * @param input - The input parameters
         * @returns Promise with the operation output
         */
        execute: (input: [ActionEntity]Input) => Promise<[ActionEntity]Output>
      }
    validationScript: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat([feature-name]): add [action] use case"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  errors:
    purpose: "Define domain-specific exceptions for business rule violations"
    rules:
      should:
        - "Extend the native Error class"
        - "Have descriptive names ending with 'Error'"
        - "Contain meaningful error messages"
        - "Represent business rule violations"
        - "Be thrown when domain invariants are violated"
      shouldNot:
        - "Contain HTTP status codes"
        - "Include technical/implementation details"
        - "Expose sensitive information"
        - "Import external dependencies"
    template: |
      // src/features/[feature-name]/domain/errors/[error-name].ts

      /**
       * Error thrown when [describe when this error occurs]
       * @extends Error
       */
      export class [ErrorName]Error extends Error {
        constructor() {
          super('[Error message]')
          this.name = '[ErrorName]Error'
        }
      }
    validationScript: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat([feature-name]): add [error-name] domain error"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  testHelpers:
    purpose: "Provide mock implementations and test utilities for domain testing"
    rules:
      should:
        - "Create mock/stub implementations of use cases"
        - "Generate fake test data"
        - "Be pure functions that return consistent data"
        - "Help reduce test boilerplate"
        - "Use ONLY Vitest (Jest is prohibited)"
      shouldNot:
        - "Make real API calls or database queries"
        - "Depend on external services"
        - "Contain test assertions (those belong in test files)"
        - "Have side effects or maintain state"
        - "Use Jest (use Vitest instead)"
    template: |
      // src/features/[feature-name]/domain/test/mock-[action-entity]-use-case.ts
      import { vi } from 'vitest'
      import type { [ActionEntity]UseCase, [ActionEntity]Input, [ActionEntity]Output } from '../use-cases'

      /**
       * Creates a mock instance of [ActionEntity]Input
       * @returns Mock input for testing
       */
      export const mock[ActionEntity]Input = (): [ActionEntity]Input => ({
        // Mock input parameters
      })

      /**
       * Creates a mock instance of [ActionEntity]Output
       * @returns Mock output for testing
       */
      export const mock[ActionEntity]Output = (): [ActionEntity]Output => ({
        // Mock output data
      })

      /**
       * Creates a mock instance of [ActionEntity]UseCase
       * @returns Mocked use case with vitest functions
       */
      export const mock[ActionEntity]UseCase = (): [ActionEntity]UseCase => ({
        execute: vi.fn()
      })
    validationScript: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "test([feature-name]): add [action-entity] use case test helpers"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

troubleshooting:
  lintFails:
    - "DO NOT commit - Fix all lint errors first"
    - "Check for unused imports"
    - "Verify proper TypeScript types"
    - "Ensure no console.log statements"
    - "Run 'yarn lint --fix' to auto-fix when possible"
  testsFail:
    - "DO NOT commit - All tests must pass"
    - "Check if mocks match the actual interfaces"
    - "Verify Input/Output types are correct"
    - "Ensure test coverage meets requirements"
    - "Run specific test: 'yarn test [test-file-path]'"
  typeScriptFails:
    - "Check all type definitions match"
    - "Ensure no missing imports"
    - "Verify interface implementations are complete"
    - "Run 'yarn tsc --noEmit' to check types"

refactoring:
  beforeRefactoring: |
    # Check current status and differences
    echo "📊 Checking current changes..."
    git status
    git diff

    # Ensure clean working directory
    echo "✅ Saving current work..."
    git stash save "WIP: before refactoring"

    # Create refactoring branch
    echo "🌿 Creating refactor branch..."
    git checkout -b refactor/[feature-name]

    # Run tests to ensure starting point is stable
    echo "🧪 Validating current state..."
    yarn test --run
    if [ $? -ne 0 ]; then
      echo "❌ Tests failing before refactor - fix first!"
      exit 1
    fi
    echo "✅ Ready to refactor"

  duringRefactoring: |
    # After each change, check what was modified
    echo "🔍 Reviewing changes..."
    git diff --stat
    git diff

    # Validate the change
    yarn lint && yarn test --run

    # Commit atomically
    git add -p  # Interactive staging to commit only related changes
    git commit -m "refactor([feature-name]): [specific change description]"

    # Show what was changed in the last commit
    git show --stat

  commonScenarios:
    - name: "Splitting a Use Case"
      wrongExample: |
        interface CreateUserAndSendEmailUseCase {
          execute: (input: CreateUserAndSendEmailInput) => Promise<CreateUserAndSendEmailOutput>
        }
      correctExample: |
        interface CreateUserUseCase {
          execute: (input: CreateUserInput) => Promise<CreateUserOutput>
        }

        interface SendWelcomeEmailUseCase {
          execute: (input: SendWelcomeEmailInput) => Promise<SendWelcomeEmailOutput>
        }
      script: |
        echo "📝 Splitting use case into single responsibilities..."
        # Create two separate use case files
        # Update imports in affected files
        # Run tests after each change

    - name: "Renaming for Clarity"
      wrongExample: "Type names that are unclear or ambiguous"
      correctExample: "Clear, descriptive type names"
      script: |
        # 1. See all occurrences before changing
        echo "🔍 Finding all occurrences of [OldName]..."
        grep -r "[OldName]" src/features/[feature-name]/

        # 2. Perform the rename
        echo "✏️ Renaming [OldName] to [NewName]..."
        # Update files...

        # 3. Review the changes
        echo "📊 Reviewing rename changes..."
        git diff --word-diff  # Shows word-level differences

        # 4. Validate nothing broke
        yarn lint && yarn test --run

        # 5. Check if rename is complete
        echo "🔍 Ensuring no [OldName] remains..."
        grep -r "[OldName]" src/features/[feature-name]/
        if [ $? -eq 0 ]; then
          echo "⚠️ Warning: [OldName] still found in some files"
        fi

        # 6. Commit the rename
        git add .
        git commit -m "refactor([feature-name]): rename [OldName] to [NewName] for clarity"

        # 7. Show the final diff
        git show --stat

recovery:
  accidentalCommit: |
    # Revert the last commit but keep changes
    git reset --soft HEAD~1

    # Fix the issues
    # ... make corrections ...

    # Re-run validation
    yarn lint
    yarn test --coverage

    # Commit again with fixed code
    git add .
    git commit -m "[original message] - fixed"

  domainPolluted: |
    # 1. Identify violations in domain
    echo "🔍 Checking for domain violations..."
    git diff src/features/[feature-name]/domain/

    # Check for forbidden patterns
    echo "⚠️ Checking for business logic..."
    grep -r "class.*{.*calculate\|validate\|process" src/features/[feature-name]/domain/

    echo "⚠️ Checking for external dependencies..."
    grep -r "import.*axios\|fetch\|http" src/features/[feature-name]/domain/

    echo "⚠️ Checking for console logs..."
    grep -r "console\." src/features/[feature-name]/domain/

    # 2. Show what needs to be moved
    git diff src/features/[feature-name]/domain/ --name-only

    # 3. After moving code to proper layers
    echo "✅ Validating domain is clean..."
    yarn lint
    yarn test --run

    # 4. Commit the cleanup
    git add .
    git diff --staged --stat
    git commit -m "refactor([feature-name]): remove business logic from domain layer"

aiGuidelines:
  - "Always validate before committing: Run lint first, run tests second, only commit if both pass"
  - "If generation fails: Identify the specific error, fix only that error, re-run validation, do NOT proceed until fixed"
  - "Follow the principle: One use case = One file = One responsibility"
  - "If tempted to add 'And' in a use case name, split it"
  - "When in doubt: Choose simplicity over complexity, split rather than combine, ask for clarification rather than assume"
  - "Never commit with failing tests or lint errors"
  - "Always use echo statements to provide feedback during script execution"
  - "Use git diff extensively to review changes before committing"
  - "Attempt auto-fix before asking for manual intervention"
  - "Keep domain layer strictly for types and interfaces only"