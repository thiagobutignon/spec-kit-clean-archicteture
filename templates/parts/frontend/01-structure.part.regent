# ============= BEGIN STRUCTURE NEXT.JS 15 + CLEAN ARCHITECTURE =============
  # AI-NOTE: Feature-based structure designed for AI to work on atomic "Use Case Slices"
  # Each use case is isolated in its own files, allowing safe atomic operations

structure:
  # App Router centralized (MUST be in src/app)
  app:
    basePath: '__PROJECT_NAME__/src/app'
    folders:
      - '(features)'              # Route group for features
      - '__FEATURE_NAME__'        # Feature routes
      - 'api/__FEATURE_NAME__'   # Feature API routes
      - '_components'             # Private app components
    files:
      - 'layout.tsx'
      - 'page.tsx'
      - 'loading.tsx'             # File, not folder
      - 'error.tsx'               # File, not folder
      - 'not-found.tsx'           # File, not folder

  # Feature module: Contains all code for a specific business domain (e.g., users, products)
  # Designed for AI to work on one use case at a time without affecting others
  features:
    basePath: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__'
    layers:
      # Domain Layer: Core business rules and types
      domain:
        folders:
          - 'entities'      # Business entities
          - 'errors'        # Domain errors
          - 'models'        # Shared models for this feature (e.g., user-model.ts)
          - 'repositories'  # Interfaces for data persistence (e.g., user-repository.ts)
          - 'usecases'      # Interfaces for each use case (e.g., create-user.ts, get-user.ts)
          - 'value-objects' # Value objects

      # Data Layer: Implements the domain use cases
      data:
        folders:
          - 'models'        # DTOs
          - 'protocols'     # Data layer specific protocols
          - 'usecases'      # Implementations for each use case (e.g., remote-create-user.ts)

      # Infra Layer: External concerns like APIs
      infra:
        folders:
          - 'api'           # API client implementations (e.g., user-api-client.ts)
          - 'services'      # External service integrations
        files:
          - 'index.ts'      # Feature infra exports

      # Presentation Layer: UI components and actions per use case
      presentation:
        folders:
          # Server-side (per use case)
          - 'actions'       # Server Actions per use case (e.g., create-user-action.ts)
          - 'server-components' # Server Components per use case (e.g., user-list.tsx)

          # Client-side (per use case)
          - 'client-components' # Client Components per use case (e.g., create-user-form.tsx)
          - 'hooks'         # React Hooks per use case (e.g., use-create-user.ts)
          - 'providers'     # Context Providers

          # UI/Styling
          - 'ui'            # shadcn/ui components
          - 'styles'        # CSS Modules or Tailwind classes

          # DO NOT put 'app' here - it stays in src/app

      # Validation Layer: Input validation per use case
      validation:
        folders:
          - 'errors'        # Validation errors
          - 'protocols'     # Validation interfaces
          - 'schemas'       # Schemas per use case (e.g., create-user-schema.ts)
          - 'validators'    # Validators per use case (e.g., create-user-validator.ts)

      # Main Layer: Composition and configuration
      main:
        folders:
          - 'adapters'      # Adapters for external concerns
          - 'builders'      # Builders
          - 'composites'    # Composition per use case (e.g., create-user-composite.tsx)
          - 'config'        # Feature configuration
          - 'decorators'    # Decorators
          - 'factories'     # Factory methods per use case
          - 'lib'           # Feature utilities

      tests:
        folders:
          - 'unit'          # Unit tests
          - 'integration'   # Integration tests
          - 'e2e'           # E2E tests
          - 'mocks'         # Mocks and fixtures

  # Shared code with Clean Architecture layers
  shared:
    basePath: '__PROJECT_NAME__/src/shared'
    layers:
      domain:
        folders:
          - 'errors'          # Base error classes
          - 'protocols'       # Domain contracts/interfaces
          - 'types'           # Shared domain types
          - 'value-objects'   # Shared value objects

      data:
        folders:
          - 'protocols'       # Data layer protocols
          - 'helpers'         # Data transformation helpers
          - 'models'          # Shared DTOs

      infra:
        folders:
          - 'cache'           # Next.js cache utilities
          - 'http'            # Fetch wrappers and interceptors
          - 'storage'         # LocalStorage/SessionStorage adapters
          - 'cookies'         # Cookie management utilities
          - 'telemetry'       # Analytics and monitoring

      presentation:
        folders:
          - 'components'      # Shared UI components
          - 'hooks'           # Shared React hooks
          - 'providers'       # Shared context providers
          - 'ui'              # Shared shadcn/ui components
          - 'styles'          # Global styles and utilities
          - 'helpers'         # Presentation helpers

      validation:
        folders:
          - 'schemas'         # Shared Zod/Yup schemas
          - 'validators'      # Shared validation functions
          - 'protocols'       # Validation interfaces

      main:
        folders:
          - 'adapters'        # Shared adapters
          - 'builders'        # Shared builders
          - 'composites'      # Shared composites
          - 'decorators'      # Shared decorators
          - 'factories'       # Shared factories
          - 'lib'             # Utility functions

# Example of isolated use case implementation
integration:
  use_case_example:
    # Example: Adding "create-user" use case to users feature
    # AI works on these files atomically, without affecting other use cases

    # STEP 1: Check/Create shared feature models (only if not exists)
    shared_models:
      - 'src/features/users/domain/models/user-model.ts'
      - 'src/features/users/domain/repositories/user-repository.ts'

    # STEP 2: Create isolated use case files (atomic operation)
    create_user_files:
      - 'src/features/users/domain/usecases/create-user.ts'                    # Interface
      - 'src/features/users/data/usecases/remote-create-user.ts'              # Implementation
      - 'src/features/users/validation/schemas/create-user-schema.ts'         # Zod schema
      - 'src/features/users/validation/validators/create-user-validator.ts'   # Validator
      - 'src/features/users/presentation/actions/create-user-action.ts'       # Server Action
      - 'src/features/users/presentation/client-components/create-user-form.tsx' # Form component
      - 'src/features/users/presentation/hooks/use-create-user.ts'           # React Hook
      - 'src/features/users/main/composites/create-user-composite.tsx'       # Composition

    # STEP 3: Controlled modifications (append only)
    modify_files:
      - file: 'src/app/(features)/users/page.tsx'
        action: 'Import and render CreateUserComposite from feature'
      - file: 'src/features/users/domain/repositories/user-repository.ts'
        action: 'Add create() method to interface'
      - file: 'src/features/users/infra/api/user-api-client.ts'
        action: 'Implement create() method for API calls'

    # RESULT: Isolated blast radius
    # If AI fails on create-user, get-user and update-user remain untouched
    # Easy rollback: just revert the specific commit for this use case

  example_integration:
    # How features connect to the App Router
    app_route: 'src/app/(features)/users/page.tsx'
    imports_from: 'src/features/users/main/composites/create-user-composite.tsx'

    server_action: 'src/features/users/presentation/actions/create-user-action.ts'
    used_in: 'src/features/users/presentation/client-components/create-user-form.tsx'

    api_route: 'src/app/api/users/route.ts'
    imports_handler_from: 'src/features/users/main/factories'

    shared_ui: 'src/shared/presentation/components'
    shared_hooks: 'src/shared/presentation/hooks'

# ============= END STRUCTURE NEXT.JS 15 + CLEAN ARCHITECTURE =============