# ============= BEGIN GENERAL STEPS SHARED SECTION =============

  # ------------------------------------------------------------------------------
  # AI-NOTE: GENERAL WORKFLOW STEPS
  # These steps are shared across all implementations (backend, frontend, fullstack)
  # They handle Git workflow, refactoring, and collaboration processes
  # ------------------------------------------------------------------------------

  # ------------------------------------------------------------------------------
  # GENERAL WORKFLOW STEPS SECTION
  # Steps for Git management, refactoring, and code review processes
  # Applicable to all Clean Architecture implementations
  # ------------------------------------------------------------------------------

  general_steps:
    # === STEP 1: CREATE FEATURE BRANCH ===
    - id: 'create-feature-branch-__FEATURE_NAME_KEBAB_CASE__'
      type: 'branch'
      description: 'Create a new feature branch for __FEATURE_NAME_PASCAL_CASE__ development'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'GIT_WORKFLOW.md'
          description: 'Following git branching best practices for feature development.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'git flow feature branch strategy'
          url: 'https://github.com/...'
          description: 'Git Flow branching model for feature development.'
      action:
        branch_name: 'feat/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__'
      validation_script: |
        echo "üåø Creating feature branch for __FEATURE_NAME_PASCAL_CASE__ - __USE_CASE_NAME_PASCAL_CASE__..."

        # Check if we are on a clean state
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ö†Ô∏è Warning: You have uncommitted changes. Stashing them..."
          git stash save "Auto-stash before creating feature branch for __FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__"
        fi

        # Get current branch to use as base
        CURRENT_BRANCH=$(git branch --show-current)
        echo "üìç Current branch: $CURRENT_BRANCH"

        # Ensure we're on main/develop before creating feature branch
        if [ "$CURRENT_BRANCH" != "main" ] && [ "$CURRENT_BRANCH" != "develop" ]; then
          echo "‚ö†Ô∏è Warning: Not on main or develop branch. Switching to main..."
          git checkout main
          git pull origin main
        fi

        # Create and checkout new feature branch
        BRANCH_NAME="feat/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__"

        # Check if branch already exists
        if git show-ref --quiet refs/heads/$BRANCH_NAME; then
          echo "‚ö†Ô∏è Branch $BRANCH_NAME already exists. Checking out..."
          git checkout $BRANCH_NAME
          echo "üìä Pulling latest changes..."
          git pull origin $BRANCH_NAME 2>/dev/null || echo "üìù No remote branch yet"
        else
          echo "üåø Creating new branch: $BRANCH_NAME"
          git checkout -b $BRANCH_NAME
        fi

        # Verify we're on the correct branch
        CURRENT=$(git branch --show-current)
        if [ "$CURRENT" != "$BRANCH_NAME" ]; then
          echo "‚ùå ERROR: Failed to switch to branch $BRANCH_NAME"
          exit 1
        fi

        echo "‚úÖ Successfully created and switched to branch: $BRANCH_NAME"

        # If we had stashed changes, inform the user
        if git stash list | grep -q "Auto-stash before creating feature branch"; then
          echo "üí° Note: You have stashed changes. Run 'git stash pop' to restore them if needed."
        fi

    # === STEP 2: REFACTOR EXISTING CODE (CONDITIONAL) ===
    - id: 'refactor-__FILE_TO_MODIFY_KEBAB_CASE__'
      type: 'refactor_file'
      description: 'Refactor existing code in __FILE_TO_MODIFY_PASCAL_CASE__ for brownfield projects'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      condition: 'check_if_brownfield_project'
      references:
        - type: 'internal_code_analysis'
          source: 'serena'
          tool: 'find_referencing_symbols'
          query: '__SYMBOL_BEING_CHANGED__'
          description: 'Analyzing impact of refactoring on existing code.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'refactoring patterns martin fowler'
          url: 'https://refactoring.com/catalog/'
          description: 'Following established refactoring patterns.'
      path: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__FILE_TO_MODIFY_KEBAB_CASE__.ts'
      template: |
        <<<REPLACE>>>
        // Existing code to be replaced
        // This should be the exact code currently in the file
        __OLD_CODE_BLOCK__
        <<</REPLACE>>>
        <<<WITH>>>
        // Refactored code following Clean Architecture principles
        __NEW_CODE_BLOCK__
        <<</WITH>>>
      validation_script: |
        echo "üîÑ Validating refactoring changes..."

        # Check if file exists
        FILE_PATH="__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__FILE_TO_MODIFY_KEBAB_CASE__.ts"
        if [ ! -f "$FILE_PATH" ]; then
          echo "‚ö†Ô∏è File not found, skipping refactoring step"
          exit 0
        fi

        # Run type checking
        echo "üìù Running TypeScript type check..."
        npx tsc --noEmit
        if [ $? -ne 0 ]; then
          echo "‚ùå TypeScript errors detected after refactoring"
          exit 1
        fi

        # Run linting
        echo "üîç Running lint check..."
        npm run lint -- "$FILE_PATH"
        if [ $? -ne 0 ]; then
          echo "‚ö†Ô∏è Lint issues found, attempting auto-fix..."
          npm run lint -- "$FILE_PATH" --fix
          if [ $? -ne 0 ]; then
            echo "‚ùå Lint errors could not be auto-fixed"
            exit 1
          fi
        fi

        # Run tests for the refactored module
        echo "üß™ Running tests for refactored code..."
        npm run test -- --testPathPattern="__FILE_TO_MODIFY_KEBAB_CASE__"
        if [ $? -ne 0 ]; then
          echo "‚ùå Tests failed after refactoring"
          exit 1
        fi

        echo "‚úÖ Refactoring validated successfully"

        # Stage and commit changes
        git add "$FILE_PATH"
        git commit -m "refactor(__FEATURE_NAME_KEBAB_CASE__): update __FILE_TO_MODIFY_KEBAB_CASE__ for Clean Architecture compliance"
        echo "‚úÖ Refactoring committed"

    # === STEP 3: DELETE OBSOLETE FILES (CONDITIONAL) ===
    - id: 'delete-file-__FILE_TO_DELETE_KEBAB_CASE__'
      type: 'delete_file'
      description: 'Remove obsolete file __FILE_TO_DELETE_PASCAL_CASE__ during refactoring'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      condition: 'check_if_file_obsolete'
      references:
        - type: 'internal_code_analysis'
          source: 'serena'
          tool: 'find_referencing_symbols'
          query: '__FILE_TO_DELETE_PASCAL_CASE__'
          description: 'Checking for references to file being deleted.'
      path: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__FILE_TO_DELETE_KEBAB_CASE__.ts'
      validation_script: |
        echo "üóëÔ∏è Validating file deletion..."

        FILE_PATH="__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__/__FILE_TO_DELETE_KEBAB_CASE__.ts"

        # Check if file exists
        if [ ! -f "$FILE_PATH" ]; then
          echo "üìù File already deleted or doesn't exist, skipping"
          exit 0
        fi

        # Search for references to this file
        echo "üîç Checking for references to file..."
        REFERENCES=$(grep -r "__FILE_TO_DELETE_KEBAB_CASE__" __PROJECT_NAME__/src --exclude-dir=node_modules --exclude-dir=.git | grep -v "$FILE_PATH" || true)

        if [ -n "$REFERENCES" ]; then
          echo "‚ö†Ô∏è WARNING: Found references to file being deleted:"
          echo "$REFERENCES"
          echo "‚ùì Do you want to proceed with deletion? (y/n)"
          read -r CONFIRM
          if [ "$CONFIRM" != "y" ]; then
            echo "‚ùå Deletion cancelled"
            exit 1
          fi
        fi

        # Remove the file
        echo "üóëÔ∏è Deleting file: $FILE_PATH"
        rm "$FILE_PATH"

        # Check if directory is empty and remove if so
        DIR_PATH=$(dirname "$FILE_PATH")
        if [ -z "$(ls -A $DIR_PATH 2>/dev/null)" ]; then
          echo "üìÅ Removing empty directory: $DIR_PATH"
          rmdir "$DIR_PATH"
        fi

        # Run tests to ensure nothing broke
        echo "üß™ Running tests to verify deletion didn't break anything..."
        npm run test
        if [ $? -ne 0 ]; then
          echo "‚ùå Tests failed after file deletion"
          echo "üîÑ Restoring file..."
          git checkout -- "$FILE_PATH"
          exit 1
        fi

        echo "‚úÖ File deletion validated successfully"

        # Stage and commit deletion
        git add -A
        git commit -m "refactor(__FEATURE_NAME_KEBAB_CASE__): remove obsolete __FILE_TO_DELETE_KEBAB_CASE__"
        echo "‚úÖ File deletion committed"

    # === STEP 4: CREATE PULL REQUEST ===
    - id: 'create-pull-request-__FEATURE_NAME_KEBAB_CASE__'
      type: 'pull_request'
      description: 'Create pull request for __FEATURE_NAME_PASCAL_CASE__ - __USE_CASE_NAME_PASCAL_CASE__ implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'PULL_REQUEST_TEMPLATE.md'
          description: 'Following PR template and conventions.'
      action:
        title: 'feat(__FEATURE_NAME_KEBAB_CASE__): implement __USE_CASE_NAME_KEBAB_CASE__ with Clean Architecture'
        base_branch: 'main'
        labels: ['feature', 'clean-architecture', '__LAYER__']
      template: |
        ## Summary
        Implementation of __USE_CASE_NAME_PASCAL_CASE__ for __FEATURE_NAME_PASCAL_CASE__ feature following Clean Architecture principles.

        ## Changes
        - ‚ú® Implemented __USE_CASE_NAME_PASCAL_CASE__ use case in domain layer
        - üèóÔ∏è Created data layer implementation
        - üîß Added infrastructure adapters
        - üé® Implemented presentation layer
        - ‚úÖ Added comprehensive test coverage
        - üìù Updated documentation

        ## Architecture Compliance
        - [x] Domain layer: Pure business logic, no dependencies
        - [x] Data layer: Use case implementation with protocols
        - [x] Infrastructure: External service adapters
        - [x] Presentation: Controllers/Components/Handlers
        - [x] Dependency flow: Inward only (Clean Architecture)

        ## Testing
        - [x] Unit tests for all layers
        - [x] Integration tests for use case flows
        - [x] E2E tests for critical paths
        - [x] Test coverage > 80%

        ## Checklist
        - [x] Code follows project conventions
        - [x] Tests pass locally
        - [x] Documentation updated
        - [x] No console.logs or debugging code
        - [x] Lint and type checks pass
        - [x] Performance impact considered
        - [x] Security implications reviewed

        ## Related Issues
        Closes #__ISSUE_NUMBER__

        ## Screenshots/Examples
        <!-- Add if applicable -->

        ## Notes for Reviewers
        - Pay special attention to domain boundary enforcement
        - Verify dependency injection patterns
        - Check error handling completeness

        ü§ñ Generated with Clean Architecture Template System
      validation_script: |
        echo "üìã Preparing to create pull request..."

        # Ensure all changes are committed
        if [ -n "$(git status --porcelain)" ]; then
          echo "‚ö†Ô∏è You have uncommitted changes. Please commit them first."
          exit 1
        fi

        # Push branch to remote
        BRANCH_NAME=$(git branch --show-current)
        echo "üì§ Pushing branch $BRANCH_NAME to remote..."
        git push -u origin $BRANCH_NAME
        if [ $? -ne 0 ]; then
          echo "‚ùå Failed to push branch"
          exit 1
        fi

        # Run final checks
        echo "üîç Running final validation..."
        npm run lint
        if [ $? -ne 0 ]; then
          echo "‚ùå Lint check failed"
          exit 1
        fi

        npm run test
        if [ $? -ne 0 ]; then
          echo "‚ùå Tests failed"
          exit 1
        fi

        npm run build
        if [ $? -ne 0 ]; then
          echo "‚ùå Build failed"
          exit 1
        fi

        # Create PR using GitHub CLI if available
        if command -v gh &> /dev/null; then
          echo "üöÄ Creating pull request using GitHub CLI..."
          gh pr create \
            --title "feat(__FEATURE_NAME_KEBAB_CASE__): implement __USE_CASE_NAME_KEBAB_CASE__ with Clean Architecture" \
            --body-file .github/pull_request_template.md \
            --base main \
            --label "feature,clean-architecture,__LAYER__"

          if [ $? -eq 0 ]; then
            echo "‚úÖ Pull request created successfully!"
            PR_URL=$(gh pr view --json url -q .url)
            echo "üîó PR URL: $PR_URL"
          else
            echo "‚ö†Ô∏è Failed to create PR via CLI, please create manually"
          fi
        else
          echo "üìù GitHub CLI not installed. Please create PR manually at:"
          echo "   https://github.com/__GITHUB_ORG__/__REPO_NAME__/pull/new/$BRANCH_NAME"
        fi

        echo "‚úÖ Ready for pull request!"

    # === STEP 5: TRIGGER CODE REVIEW ===
    - id: 'trigger-code-review-__FEATURE_NAME_KEBAB_CASE__'
      type: 'code_review'
      description: 'Trigger AI-powered code review for __FEATURE_NAME_PASCAL_CASE__ implementation'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      references:
        - type: 'internal_guideline'
          source: 'CODE_REVIEW_CHECKLIST.md'
          description: 'Following code review standards and checklist.'
        - type: 'external_pattern'
          source: 'context7'
          query: 'clean architecture code review checklist'
          url: 'https://github.com/...'
          description: 'Clean Architecture review guidelines.'
      action:
        reviewer: 'claude'
        review_type: 'comprehensive'
        focus_areas:
          - 'clean_architecture_compliance'
          - 'dependency_direction'
          - 'business_logic_isolation'
          - 'test_coverage'
          - 'error_handling'
          - 'performance'
          - 'security'
      validation_script: |
        echo "ü§ñ Initiating AI-powered code review..."

        # Check if claude CLI is available
        if ! command -v claude &> /dev/null; then
          echo "‚ö†Ô∏è Claude CLI not installed. Skipping AI review."
          echo "üìù Please install Claude CLI or request manual review."
          exit 0
        fi

        # Get the current branch name
        BRANCH_NAME=$(git branch --show-current)
        echo "üìä Reviewing branch: $BRANCH_NAME"

        # Get list of changed files
        echo "üìÅ Analyzing changed files..."
        CHANGED_FILES=$(git diff main...$BRANCH_NAME --name-only)
        echo "Files to review:"
        echo "$CHANGED_FILES"

        # Trigger Claude review
        echo "üîç Starting Claude AI review..."
        claude /review \
          --branch "$BRANCH_NAME" \
          --focus "clean-architecture" \
          --checklist ".github/clean_architecture_checklist.md" \
          --output "review-report.md"

        if [ $? -eq 0 ]; then
          echo "‚úÖ AI review completed successfully!"
          echo "üìã Review report saved to: review-report.md"

          # Check if review passed
          if grep -q "APPROVED" review-report.md; then
            echo "‚úÖ Code review PASSED! Ready for human review."
          elif grep -q "NEEDS_CHANGES" review-report.md; then
            echo "‚ö†Ô∏è Code review found issues. Please address the feedback."
            echo "üìù Opening review report..."
            cat review-report.md
            exit 1
          else
            echo "üìù Review completed. Check review-report.md for details."
          fi
        else
          echo "‚ö†Ô∏è AI review encountered an error. Proceeding with manual review."
        fi

        # Optional: Post review as PR comment if GitHub CLI is available
        if command -v gh &> /dev/null && [ -f "review-report.md" ]; then
          echo "üí¨ Posting review as PR comment..."
          PR_NUMBER=$(gh pr view --json number -q .number 2>/dev/null)
          if [ -n "$PR_NUMBER" ]; then
            gh pr comment $PR_NUMBER -F review-report.md
            echo "‚úÖ Review posted to PR #$PR_NUMBER"
          fi
        fi

        echo "‚úÖ Code review process completed!"

    # === STEP 6: POST-MERGE CLEANUP ===
    - id: 'post-merge-cleanup-__FEATURE_NAME_KEBAB_CASE__'
      type: 'cleanup'
      description: 'Clean up after __FEATURE_NAME_PASCAL_CASE__ merge'
      status: 'PENDING' # PENDING | SUCCESS | FAILED | SKIPPED
      rlhf_score: null # -2, -1, 0, 1, 2
      execution_log: ''
      condition: 'check_if_pr_merged'
      validation_script: |
        echo "üßπ Starting post-merge cleanup..."

        # Switch back to main branch
        echo "üìç Switching to main branch..."
        git checkout main
        git pull origin main

        # Delete local feature branch
        BRANCH_NAME="feat/__FEATURE_NAME_KEBAB_CASE__/__USE_CASE_NAME_KEBAB_CASE__"
        echo "üóëÔ∏è Deleting local branch: $BRANCH_NAME"
        git branch -D $BRANCH_NAME 2>/dev/null || echo "Branch already deleted"

        # Delete remote feature branch (optional)
        echo "‚ùì Delete remote branch? (y/n)"
        read -r DELETE_REMOTE
        if [ "$DELETE_REMOTE" = "y" ]; then
          git push origin --delete $BRANCH_NAME 2>/dev/null || echo "Remote branch already deleted"
          echo "‚úÖ Remote branch deleted"
        fi

        # Clean up any review artifacts
        if [ -f "review-report.md" ]; then
          echo "üóëÔ∏è Removing review report..."
          rm review-report.md
        fi

        # Update local repository
        echo "üì• Fetching latest changes..."
        git fetch --prune

        echo "‚úÖ Post-merge cleanup completed!"
        echo "üéâ Feature __FEATURE_NAME_PASCAL_CASE__ - __USE_CASE_NAME_PASCAL_CASE__ successfully integrated!"

# ============= END GENERAL STEPS SHARED SECTION =============