# =============================================
# GENERATED FILE - DO NOT EDIT DIRECTLY
# Target: frontend
# Built from parts in templates/parts
# Generated at: 2025-09-23 16:43:53
# To modify, edit the part files and rebuild
# =============================================


# --- From: shared/00-header.part.regent ---

# AI-NOTE: This YAML file is the single source of truth for generating clean architecture layers.
# This is the MASTER TEMPLATE that will evolve to support all architectural layers.
#
# INTELLIGENT RLHF SCORING SYSTEM:
# The system uses Reinforcement Learning from Human Feedback to score execution quality:
# -2: CATASTROPHIC - Architecture violations, incorrect REPLACE/WITH format in refactor steps
# -1: RUNTIME ERROR - Lint failures, test failures, git operation problems
#  0: LOW CONFIDENCE - System is uncertain, avoids hallucinations
# +1: GOOD - Task complete but missing architectural elements
# +2: PERFECT - Exceptional quality with Clean Architecture, DDD principles, ubiquitous language
#
# QUALITY INDICATORS FOR +2 SCORE:
# - Uses ubiquitous language terminology
# - Follows Domain-Driven Design principles
# - Applies Clean Architecture concepts
# - Implements patterns: Aggregate Root, Value Objects, Domain Events
# - Perfect branch naming convention
# - Comprehensive PR descriptions
#
version: '3.0.0'
# AI-NOTE: Update these fields to describe the specific feature and layers.
metadata:
  title: '__FEATURE_NAME_PASCAL_CASE__ Clean Architecture Implementation'
  description: 'Clean Architecture template for __FEATURE_NAME_LOWER_CASE__ feature following master template rules.'
  source: 'TEMPLATE.yaml'
  # AI-NOTE: This should be replaced with the current date, e.g., YYYY-MM-DD.
  lastUpdated: '__CURRENT_DATE__'
  # AI-NOTE: Specify which layers are being implemented
  layers:
    - 'domain'
    # Future layers will be added here:
    # - 'data'
    # - 'infra'
    # - 'presentation'
    # - 'validation'
    # - 'main'
  # AI-NOTE: Define ubiquitous language for +2 RLHF score
  ubiquitousLanguage:
    - term: '__ENTITY_NAME__'
      definition: '__ENTITY_DEFINITION_IN_BUSINESS_CONTEXT__'
    - term: '__VALUE_OBJECT_NAME__'
      definition: '__VALUE_OBJECT_BUSINESS_MEANING__'
    - term: '__DOMAIN_EVENT__'
      definition: '__EVENT_BUSINESS_SIGNIFICANCE__'



# --- From: frontend/01-structure.part.regent ---

structure:
  # App Router centralized (MUST be in src/app)
  app:
    basePath: '__PROJECT_NAME__/src/app'
    folders:
      - '(features)'              # Route group for features
      - '__FEATURE_NAME__'        # Feature routes
      - 'api/__FEATURE_NAME__'   # Feature API routes
      - '_components'             # Private app components
    files:
      - 'layout.tsx'
      - 'page.tsx'
      - 'loading.tsx'             # File, not folder
      - 'error.tsx'               # File, not folder
      - 'not-found.tsx'           # File, not folder

  # Features with Clean Architecture
  features:
    basePath: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__'
    layers:
      domain:
        folders:
          - 'entities'      # Business entities
          - 'errors'        # Domain errors
          - 'models'        # Types/Interfaces
          - 'usecases'      # Use cases (interfaces)
          - 'value-objects' # Value objects

      data:
        folders:
          - 'models'        # DTOs
          - 'protocols'     # Contracts/Interfaces
          - 'usecases'      # Use case implementations

      infra:
        folders:
          - 'api'           # Feature-specific API integrations
          - 'services'      # Feature-specific external services
        files:
          - 'index.ts'      # Feature infra exports

      presentation:
        folders:
          # Server-side
          - 'actions'       # Server Actions ('use server')
          - 'server-components' # Server Components (default)

          # Client-side
          - 'client-components' # Client Components ('use client')
          - 'hooks'         # React Hooks
          - 'providers'     # Context Providers

          # UI/Styling
          - 'ui'            # shadcn/ui components
          - 'styles'        # CSS Modules or Tailwind classes

          # DO NOT put 'app' here - it stays in src/app

      validation:
        folders:
          - 'errors'        # Validation errors
          - 'protocols'     # Validation interfaces
          - 'schemas'       # Zod/Yup schemas
          - 'validators'    # Validation implementations

      main:
        folders:
          - 'adapters'      # Adapters
          - 'builders'      # Builders
          - 'composites'    # Composition
          - 'config'        # Feature configuration
          - 'decorators'    # Decorators
          - 'factories'     # Factory methods
          - 'lib'           # Feature utilities

      tests:
        folders:
          - 'unit'          # Unit tests
          - 'integration'   # Integration tests
          - 'e2e'           # E2E tests
          - 'mocks'         # Mocks and fixtures

  # Shared code with Clean Architecture layers
  shared:
    basePath: '__PROJECT_NAME__/src/shared'
    layers:
      domain:
        folders:
          - 'errors'          # Base error classes
          - 'protocols'       # Domain contracts/interfaces
          - 'types'           # Shared domain types
          - 'value-objects'   # Shared value objects

      data:
        folders:
          - 'protocols'       # Data layer protocols
          - 'helpers'         # Data transformation helpers
          - 'models'          # Shared DTOs

      infra:
        folders:
          - 'cache'           # Next.js cache utilities
          - 'http'            # Fetch wrappers and interceptors
          - 'storage'         # LocalStorage/SessionStorage adapters
          - 'cookies'         # Cookie management utilities
          - 'telemetry'       # Analytics and monitoring

      presentation:
        folders:
          - 'components'      # Shared UI components
          - 'hooks'           # Shared React hooks
          - 'providers'       # Shared context providers
          - 'ui'              # Shared shadcn/ui components
          - 'styles'          # Global styles and utilities
          - 'helpers'         # Presentation helpers

      validation:
        folders:
          - 'schemas'         # Shared Zod/Yup schemas
          - 'validators'      # Shared validation functions
          - 'protocols'       # Validation interfaces

      main:
        folders:
          - 'adapters'        # Shared adapters
          - 'builders'        # Shared builders
          - 'composites'      # Shared composites
          - 'decorators'      # Shared decorators
          - 'factories'       # Shared factories
          - 'lib'             # Utility functions

# How to connect feature with App Router:
integration:
  example:
    # 1. Feature route in App Router
    app_route: 'src/app/(features)/users/page.tsx'

    # 2. Import components from feature
    imports_from: 'src/features/users/presentation/server-components'

    # 3. Feature Server Action
    server_action: 'src/features/users/presentation/actions/create-user.ts'

    # 4. API Route
    api_route: 'src/app/api/users/route.ts'
    imports_handler_from: 'src/features/users/main/factories'

    # 5. Shared components
    shared_ui: 'src/shared/presentation/components'
    shared_hooks: 'src/shared/presentation/hooks'


