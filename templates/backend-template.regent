# =============================================
# GENERATED FILE - DO NOT EDIT DIRECTLY
# Target: backend
# Built from parts in templates/parts
# Generated at: 2025-09-23 16:43:53
# To modify, edit the part files and rebuild
# =============================================


# --- From: shared/00-header.part.regent ---

# AI-NOTE: This YAML file is the single source of truth for generating clean architecture layers.
# This is the MASTER TEMPLATE that will evolve to support all architectural layers.
#
# INTELLIGENT RLHF SCORING SYSTEM:
# The system uses Reinforcement Learning from Human Feedback to score execution quality:
# -2: CATASTROPHIC - Architecture violations, incorrect REPLACE/WITH format in refactor steps
# -1: RUNTIME ERROR - Lint failures, test failures, git operation problems
#  0: LOW CONFIDENCE - System is uncertain, avoids hallucinations
# +1: GOOD - Task complete but missing architectural elements
# +2: PERFECT - Exceptional quality with Clean Architecture, DDD principles, ubiquitous language
#
# QUALITY INDICATORS FOR +2 SCORE:
# - Uses ubiquitous language terminology
# - Follows Domain-Driven Design principles
# - Applies Clean Architecture concepts
# - Implements patterns: Aggregate Root, Value Objects, Domain Events
# - Perfect branch naming convention
# - Comprehensive PR descriptions
#
version: '3.0.0'
# AI-NOTE: Update these fields to describe the specific feature and layers.
metadata:
  title: '__FEATURE_NAME_PASCAL_CASE__ Clean Architecture Implementation'
  description: 'Clean Architecture template for __FEATURE_NAME_LOWER_CASE__ feature following master template rules.'
  source: 'TEMPLATE.yaml'
  # AI-NOTE: This should be replaced with the current date, e.g., YYYY-MM-DD.
  lastUpdated: '__CURRENT_DATE__'
  # AI-NOTE: Specify which layers are being implemented
  layers:
    - 'domain'
    # Future layers will be added here:
    # - 'data'
    # - 'infra'
    # - 'presentation'
    # - 'validation'
    # - 'main'
  # AI-NOTE: Define ubiquitous language for +2 RLHF score
  ubiquitousLanguage:
    - term: '__ENTITY_NAME__'
      definition: '__ENTITY_DEFINITION_IN_BUSINESS_CONTEXT__'
    - term: '__VALUE_OBJECT_NAME__'
      definition: '__VALUE_OBJECT_BUSINESS_MEANING__'
    - term: '__DOMAIN_EVENT__'
      definition: '__EVENT_BUSINESS_SIGNIFICANCE__'



# --- From: backend/01-structure.part.regent ---
  # AI-NOTE: Feature-based structure for Clean Architecture

  structure:
    # Main application structure (entry point)
    app:
      basePath: '__PROJECT_NAME__/src'
      folders:
        - 'main'           # Application bootstrap and configuration
        - 'shared'         # Shared code with Clean Architecture layers
        - 'features'       # Feature modules

    # Feature-based Clean Architecture
    features:
      basePath: '__PROJECT_NAME__/src/features/__FEATURE_NAME_KEBAB_CASE__'
      # Each feature contains its own layers following Clean Architecture
      layers:
        domain:
          folders:
            - 'models'      # Feature type definitions (e.g., AccountModel, SurveyModel)
            - 'usecases'    # Feature use case interfaces with namespace pattern

        data:
          folders:
            - 'protocols'   # Feature data layer protocols/interfaces
            - 'usecases'    # Feature use case implementations

        infra:
          folders:
            - 'db'            # Feature-specific database repositories
          files:
            - 'index.ts'      # Feature infra exports

        presentation:
          folders:
            - 'controllers'   # Feature HTTP controllers
            - 'errors'        # Feature HTTP error definitions
            - 'helpers'       # Feature HTTP helpers
            - 'middlewares'   # Feature HTTP middlewares
            - 'protocols'      # Feature HTTP protocols/interfaces

        validation:
          folders:
            - 'validators'    # Feature validation rules
            - 'protocols'     # Feature validation protocols

        main:
          folders:
            - 'adapters'     # Feature factory methods
            - 'config'       # Feature configuration files
            - 'decorators'    # Feature decorators
            - 'docs'         # Feature documentation
            - 'factories'     # Feature factory methods
            - 'middlewares'   # Feature global middlewares
            - 'routes'        # Feature route definitions

        tests:
          folders:
            - 'data'          # Feature data layer tests
            - 'domain'        # Feature domain layer tests mocks only
            - 'infra'         # Feature infrastructure layer tests
            - 'presentation'  # Feature presentation layer tests
            - 'validation'    # Feature validation layer tests
            - 'main'          # Feature main layer tests

  # Integration between features and main application
  integration:
    main_server:
      basePath: '__PROJECT_NAME__/src/main'
      folders:
        - 'config'          # Server configuration (express, fastify, etc)
        - 'routes'          # Route aggregation from all features
        - 'middlewares'     # Global middlewares
        - 'adapters'        # Framework adapters
        - 'docs'            # API documentation (Swagger, etc)
      files:
        - 'server.ts'       # Main server file
        - 'app.ts'          # Application setup

    shared:
      basePath: '__PROJECT_NAME__/src/shared'
      layers:
        domain:
          folders:
            - 'errors'          # Base error classes
            - 'protocols'       # Domain contracts/interfaces
            - 'types'           # Shared domain types
            - 'value-objects'   # Shared value objects

        data:
          folders:
            - 'protocols'       # Data layer protocols
            - 'helpers'         # Data transformation helpers

        infra:
          folders:
            - 'cryptography'    # Shared encryption/hashing adapters (bcrypt, jwt)
            - 'http'            # Shared HTTP clients and adapters
            - 'validators'      # Shared validators (email, cpf, etc)
            - 'cache'           # Shared cache implementations (Redis, memory)
            - 'telemetry'       # Shared logging and monitoring
            - 'messaging'       # Shared message queue adapters

        presentation:
          folders:
            - 'protocols'       # Presentation protocols
            - 'helpers'         # Presentation helpers
            - 'middlewares'     # Shared middlewares

        main:
          folders:
            - 'adapters'        # Shared adapters
            - 'decorators'      # Shared decorators
            - 'factories'       # Shared factories

    example_integration:
      # How features connect to the main application
      feature_route: 'src/features/users/main/routes/user-routes.ts'
      imports_to: 'src/main/routes/index.ts'

      feature_factory: 'src/features/users/main/factories/user-controller-factory.ts'
      used_in: 'src/features/users/main/routes/user-routes.ts'

      shared_protocol: 'src/shared/protocols/http.ts'
      used_by_features: 'src/features/*/presentation/protocols'


