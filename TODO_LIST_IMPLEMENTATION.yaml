version: "1.0.0"

metadata:
  title: "Todo List Feature Implementation"
  description: "Complete implementation of a Todo List feature following Domain Layer Template"
  lastUpdated: "2025-09-15"

structure:
  basePath: "src/"
  folders:
    - name: "features/todo-list/domain/errors"
      description: "Todo-specific error classes"
      required: true
    - name: "features/todo-list/domain/use-cases"
      description: "Todo use case interfaces"
      required: true
    - name: "features/todo-list/domain/test"
      description: "Todo test mock helpers"
      required: true

layerDependencies:
  canImportFromDomain:
    - "Data Layer - Will implement the todo use case interfaces"
    - "Presentation Layer - Will use todo types and call use cases"
    - "Infrastructure Layer - May use todo types for persistence"
    - "Main/Factory Layer - Will wire todo dependencies"
    - "Test Files - Will test todo domain logic"
  cannotImportFromDomain:
    - "External Libraries"
    - "Node Modules"
  domainCannotImportFrom:
    - "Any other layer"
    - "Data Layer"
    - "Presentation Layer"
    - "Infrastructure Layer"
    - "Main Layer"
    - "External Libraries"

domainRules:
  allowed:
    - "Todo type definitions (TodoItem, TodoList)"
    - "Todo use case interfaces (CreateTodo, CompleteTodo, etc.)"
    - "Todo-specific error classes"
    - "Todo test mock functions"
  forbidden:
    - "Database operations"
    - "HTTP calls"
    - "React components"
    - "Express routes"
    - "Console.log statements"
    - "Date.now() or new Date() directly"
    - "Math.random() or UUID generation"
    - "Business logic implementation"

features:
  useCases:
    purpose: "Define todo list operations available in the system"
    rules:
      should:
        - "Have one use case per file"
        - "Use Input/Output naming convention"
        - "Return promises for async operations"
        - "Be named with action verbs (Create, Complete, Delete, List, Update)"
      shouldNot:
        - "Contain implementation logic"
        - "Import external libraries"
        - "Have side effects"
        - "Combine multiple operations"
    template: |
      // Example: CreateTodo use case
      export type CreateTodoInput = {
        title: string
        description?: string
        priority: 'low' | 'medium' | 'high'
      }

      export type CreateTodoOutput = {
        id: string
        title: string
        description?: string
        completed: boolean
        priority: 'low' | 'medium' | 'high'
        createdAt: Date
      }

      export interface CreateTodoUseCase {
        execute: (input: CreateTodoInput) => Promise<CreateTodoOutput>
      }
    validationScript: |
      echo "üîç Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "‚ùå LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "‚ùå AUTO-FIX FAILED"
          exit 1
        fi
      fi
      echo "‚úÖ Lint passed"

      echo "üß™ Running tests..."
      yarn test --coverage
      echo "‚úÖ Tests passed"

      echo "üì¶ Staging changes..."
      git add .
      git commit -m "feat(todo-list): add use case"

  errors:
    purpose: "Define todo-specific domain errors"
    rules:
      should:
        - "Extend Error class"
        - "Have descriptive error messages"
        - "Include relevant context (todoId, etc.)"
        - "End with 'Error' suffix"
      shouldNot:
        - "Include HTTP status codes"
        - "Import external dependencies"
        - "Log to console"
        - "Have side effects"
    template: |
      export class TodoNotFoundError extends Error {
        constructor(todoId: string) {
          super(`Todo with id ${todoId} not found`)
          this.name = 'TodoNotFoundError'
        }
      }
    validationScript: |
      echo "üîç Running lint check..."
      yarn lint
      echo "‚úÖ Lint passed"

      echo "üì¶ Staging changes..."
      git add .
      git commit -m "feat(todo-list): add domain error"

  testHelpers:
    purpose: "Provide mock implementations for todo use cases"
    rules:
      should:
        - "Use Vitest for mocking"
        - "Return consistent test data"
        - "Cover all use cases"
        - "Be pure functions"
      shouldNot:
        - "Use Jest"
        - "Make real API calls"
        - "Have side effects"
        - "Maintain state"
    template: |
      import { vi } from 'vitest'
      import type { CreateTodoUseCase, CreateTodoInput, CreateTodoOutput } from '../use-cases'

      export const mockCreateTodoInput = (): CreateTodoInput => ({
        title: 'Test Todo',
        description: 'Test description',
        priority: 'medium'
      })

      export const mockCreateTodoOutput = (): CreateTodoOutput => ({
        id: 'todo-123',
        title: 'Test Todo',
        description: 'Test description',
        completed: false,
        priority: 'medium',
        createdAt: new Date('2025-01-15T10:00:00Z')
      })

      export const mockCreateTodoUseCase = (): CreateTodoUseCase => ({
        execute: vi.fn()
      })
    validationScript: |
      echo "üîç Running lint check..."
      yarn lint
      echo "‚úÖ Lint passed"

      echo "üß™ Running tests..."
      yarn test
      echo "‚úÖ Tests passed"

      echo "üì¶ Staging changes..."
      git add .
      git commit -m "test(todo-list): add test helpers"

troubleshooting:
  lintFails:
    - "Check for unused imports in use case files"
    - "Verify TypeScript types are properly defined"
    - "Ensure no console.log in domain layer"
    - "Check for missing semicolons or formatting issues"
  testsFail:
    - "Verify mock data matches use case interfaces"
    - "Check if test helpers are properly imported"
    - "Ensure Date objects are mocked correctly"
    - "Verify all promises are handled"
  typeScriptFails:
    - "Check Input/Output types match use case definitions"
    - "Verify all imports are correct"
    - "Ensure generic types are properly specified"
    - "Check for circular dependencies"

refactoring:
  beforeRefactoring: |
    # Check current todo domain structure
    echo "üìä Checking current structure..."
    ls -la src/features/todo-list/domain/

    # Verify tests pass
    echo "üß™ Running tests before refactoring..."
    yarn test src/features/todo-list/domain/

    # Create backup branch
    git checkout -b refactor/todo-list-domain

  duringRefactoring: |
    # Make changes incrementally
    echo "‚úèÔ∏è Refactoring..."

    # After each change
    yarn lint
    yarn test

    # Commit atomically
    git add -p
    git commit -m "refactor(todo-list): [specific change]"

  commonScenarios:
    - name: "Split complex use case"
      wrongExample: |
        interface CreateAndCompleteTodoUseCase {
          execute: (input: CreateAndCompleteTodoInput) => Promise<CreateAndCompleteTodoOutput>
        }
      correctExample: |
        interface CreateTodoUseCase {
          execute: (input: CreateTodoInput) => Promise<CreateTodoOutput>
        }

        interface CompleteTodoUseCase {
          execute: (input: CompleteTodoInput) => Promise<CompleteTodoOutput>
        }
      script: |
        # Split the combined use case
        echo "Splitting use case..."

        # Create separate files
        touch src/features/todo-list/domain/use-cases/create-todo.ts
        touch src/features/todo-list/domain/use-cases/complete-todo.ts

        # Update imports
        grep -r "CreateAndCompleteTodo" src/features/todo-list/

        # Test each separately
        yarn test

recovery:
  accidentalCommit: |
    # Undo last commit but keep changes
    git reset --soft HEAD~1

    # Fix issues
    yarn lint --fix
    yarn test

    # Recommit
    git add .
    git commit -m "feat(todo-list): [corrected message]"

  domainPolluted: |
    # Find violations
    echo "üîç Checking for violations..."

    # Check for implementation logic
    grep -r "async\|await\|fetch\|axios" src/features/todo-list/domain/

    # Check for console statements
    grep -r "console\." src/features/todo-list/domain/

    # Remove violations
    echo "üßπ Cleaning domain layer..."

    # Move logic to data layer
    mv [implementation] src/features/todo-list/data/

    # Verify clean
    yarn lint

aiGuidelines:
  - "Todo use cases must be single-purpose (no CreateAndComplete)"
  - "Always use Input/Output suffix for types"
  - "Priority must be typed as 'low' | 'medium' | 'high'"
  - "Date values should be Date type, not string"
  - "Todo IDs should be string type"
  - "Optional fields use ? operator (description?: string)"
  - "Test helpers must use Vitest, not Jest"
  - "Each use case gets its own file"
  - "Errors must include context (todoId when relevant)"
  - "No implementation logic in domain layer"

# Specific todo implementations
todoImplementations:
  TodoItem:
    description: "Individual todo item type definition"
    code: |
      export type TodoItem = {
        id: string
        title: string
        description?: string
        completed: boolean
        priority: 'low' | 'medium' | 'high'
        createdAt: Date
        completedAt?: Date
      }

  TodoList:
    description: "Collection of todo items"
    code: |
      export type TodoList = {
        items: TodoItem[]
        totalCount: number
        completedCount: number
      }

useCases:
  createTodo:
    description: "Create a new todo item"
    template: |
      // src/features/todo-list/domain/use-cases/create-todo.ts

      /**
       * Input parameters for CreateTodoUseCase
       */
      export type CreateTodoInput = {
        title: string
        description?: string
        priority: 'low' | 'medium' | 'high'
      }

      /**
       * Output type for CreateTodoUseCase
       */
      export type CreateTodoOutput = {
        id: string
        title: string
        description?: string
        completed: boolean
        priority: 'low' | 'medium' | 'high'
        createdAt: Date
      }

      /**
       * CreateTodoUseCase interface
       * @description Creates a new todo item in the system
       */
      export interface CreateTodoUseCase {
        /**
         * Execute the create todo operation
         * @param input - The input parameters
         * @returns Promise with the created todo
         */
        execute: (input: CreateTodoInput) => Promise<CreateTodoOutput>
      }

  completeTodo:
    description: "Mark a todo item as completed"
    template: |
      // src/features/todo-list/domain/use-cases/complete-todo.ts

      /**
       * Input parameters for CompleteTodoUseCase
       */
      export type CompleteTodoInput = {
        todoId: string
      }

      /**
       * Output type for CompleteTodoUseCase
       */
      export type CompleteTodoOutput = {
        id: string
        completed: boolean
        completedAt: Date
      }

      /**
       * CompleteTodoUseCase interface
       * @description Marks a todo item as completed
       */
      export interface CompleteTodoUseCase {
        /**
         * Execute the complete todo operation
         * @param input - The input parameters
         * @returns Promise with the completion result
         */
        execute: (input: CompleteTodoInput) => Promise<CompleteTodoOutput>
      }

  deleteTodo:
    description: "Delete a todo item"
    template: |
      // src/features/todo-list/domain/use-cases/delete-todo.ts

      /**
       * Input parameters for DeleteTodoUseCase
       */
      export type DeleteTodoInput = {
        todoId: string
      }

      /**
       * Output type for DeleteTodoUseCase
       */
      export type DeleteTodoOutput = {
        success: boolean
        deletedId: string
      }

      /**
       * DeleteTodoUseCase interface
       * @description Removes a todo item from the system
       */
      export interface DeleteTodoUseCase {
        /**
         * Execute the delete todo operation
         * @param input - The input parameters
         * @returns Promise with the deletion result
         */
        execute: (input: DeleteTodoInput) => Promise<DeleteTodoOutput>
      }

  listTodos:
    description: "List all todo items with optional filtering"
    template: |
      // src/features/todo-list/domain/use-cases/list-todos.ts

      /**
       * Input parameters for ListTodosUseCase
       */
      export type ListTodosInput = {
        filter?: 'all' | 'completed' | 'pending'
        sortBy?: 'date' | 'priority' | 'title'
        limit?: number
        offset?: number
      }

      /**
       * Output type for ListTodosUseCase
       */
      export type ListTodosOutput = {
        items: Array<{
          id: string
          title: string
          description?: string
          completed: boolean
          priority: 'low' | 'medium' | 'high'
          createdAt: Date
          completedAt?: Date
        }>
        totalCount: number
        completedCount: number
        hasMore: boolean
      }

      /**
       * ListTodosUseCase interface
       * @description Retrieves a list of todo items with optional filtering
       */
      export interface ListTodosUseCase {
        /**
         * Execute the list todos operation
         * @param input - The input parameters
         * @returns Promise with the todo list
         */
        execute: (input: ListTodosInput) => Promise<ListTodosOutput>
      }

  updateTodo:
    description: "Update an existing todo item"
    template: |
      // src/features/todo-list/domain/use-cases/update-todo.ts

      /**
       * Input parameters for UpdateTodoUseCase
       */
      export type UpdateTodoInput = {
        todoId: string
        title?: string
        description?: string
        priority?: 'low' | 'medium' | 'high'
      }

      /**
       * Output type for UpdateTodoUseCase
       */
      export type UpdateTodoOutput = {
        id: string
        title: string
        description?: string
        completed: boolean
        priority: 'low' | 'medium' | 'high'
        createdAt: Date
        updatedAt: Date
      }

      /**
       * UpdateTodoUseCase interface
       * @description Updates an existing todo item's information
       */
      export interface UpdateTodoUseCase {
        /**
         * Execute the update todo operation
         * @param input - The input parameters
         * @returns Promise with the updated todo
         */
        execute: (input: UpdateTodoInput) => Promise<UpdateTodoOutput>
      }

errors:
  TodoNotFound:
    template: |
      // src/features/todo-list/domain/errors/todo-not-found-error.ts

      /**
       * Error thrown when a todo item is not found
       * @extends Error
       */
      export class TodoNotFoundError extends Error {
        constructor(todoId: string) {
          super(`Todo with id ${todoId} not found`)
          this.name = 'TodoNotFoundError'
        }
      }

  TodoAlreadyCompleted:
    template: |
      // src/features/todo-list/domain/errors/todo-already-completed-error.ts

      /**
       * Error thrown when trying to complete an already completed todo
       * @extends Error
       */
      export class TodoAlreadyCompletedError extends Error {
        constructor(todoId: string) {
          super(`Todo with id ${todoId} is already completed`)
          this.name = 'TodoAlreadyCompletedError'
        }
      }

  InvalidTodoTitle:
    template: |
      // src/features/todo-list/domain/errors/invalid-todo-title-error.ts

      /**
       * Error thrown when todo title is invalid
       * @extends Error
       */
      export class InvalidTodoTitleError extends Error {
        constructor() {
          super('Todo title cannot be empty')
          this.name = 'InvalidTodoTitleError'
        }
      }

  TodoLimitExceeded:
    template: |
      // src/features/todo-list/domain/errors/todo-limit-exceeded-error.ts

      /**
       * Error thrown when user exceeds todo limit
       * @extends Error
       */
      export class TodoLimitExceededError extends Error {
        constructor(limit: number) {
          super(`Cannot create more than ${limit} todos`)
          this.name = 'TodoLimitExceededError'
        }
      }

testHelpers:
  mockCreateTodo:
    template: |
      // src/features/todo-list/domain/test/mock-create-todo-use-case.ts
      import { vi } from 'vitest'
      import type { CreateTodoUseCase, CreateTodoInput, CreateTodoOutput } from '../use-cases'

      /**
       * Creates a mock instance of CreateTodoInput
       * @returns Mock input for testing
       */
      export const mockCreateTodoInput = (): CreateTodoInput => ({
        title: 'Test Todo Item',
        description: 'This is a test todo description',
        priority: 'medium'
      })

      /**
       * Creates a mock instance of CreateTodoOutput
       * @returns Mock output for testing
       */
      export const mockCreateTodoOutput = (): CreateTodoOutput => ({
        id: 'todo-123',
        title: 'Test Todo Item',
        description: 'This is a test todo description',
        completed: false,
        priority: 'medium',
        createdAt: new Date('2025-01-15T10:00:00Z')
      })

      /**
       * Creates a mock instance of CreateTodoUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockCreateTodoUseCase = (): CreateTodoUseCase => ({
        execute: vi.fn()
      })

  mockCompleteTodo:
    template: |
      // src/features/todo-list/domain/test/mock-complete-todo-use-case.ts
      import { vi } from 'vitest'
      import type { CompleteTodoUseCase, CompleteTodoInput, CompleteTodoOutput } from '../use-cases'

      /**
       * Creates a mock instance of CompleteTodoInput
       * @returns Mock input for testing
       */
      export const mockCompleteTodoInput = (): CompleteTodoInput => ({
        todoId: 'todo-123'
      })

      /**
       * Creates a mock instance of CompleteTodoOutput
       * @returns Mock output for testing
       */
      export const mockCompleteTodoOutput = (): CompleteTodoOutput => ({
        id: 'todo-123',
        completed: true,
        completedAt: new Date('2025-01-15T11:00:00Z')
      })

      /**
       * Creates a mock instance of CompleteTodoUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockCompleteTodoUseCase = (): CompleteTodoUseCase => ({
        execute: vi.fn()
      })

  mockListTodos:
    template: |
      // src/features/todo-list/domain/test/mock-list-todos-use-case.ts
      import { vi } from 'vitest'
      import type { ListTodosUseCase, ListTodosInput, ListTodosOutput } from '../use-cases'

      /**
       * Creates a mock instance of ListTodosInput
       * @returns Mock input for testing
       */
      export const mockListTodosInput = (): ListTodosInput => ({
        filter: 'all',
        sortBy: 'date',
        limit: 10,
        offset: 0
      })

      /**
       * Creates a mock instance of ListTodosOutput
       * @returns Mock output for testing
       */
      export const mockListTodosOutput = (): ListTodosOutput => ({
        items: [
          {
            id: 'todo-1',
            title: 'First Todo',
            description: 'First todo description',
            completed: false,
            priority: 'high',
            createdAt: new Date('2025-01-15T09:00:00Z')
          },
          {
            id: 'todo-2',
            title: 'Second Todo',
            completed: true,
            priority: 'low',
            createdAt: new Date('2025-01-15T09:30:00Z'),
            completedAt: new Date('2025-01-15T10:00:00Z')
          }
        ],
        totalCount: 2,
        completedCount: 1,
        hasMore: false
      })

      /**
       * Creates a mock instance of ListTodosUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockListTodosUseCase = (): ListTodosUseCase => ({
        execute: vi.fn()
      })

validationCommands:
  createTodo: |
    echo "üîç Running lint check for create-todo..."
    yarn lint src/features/todo-list/domain/use-cases/create-todo.ts
    if [ $? -ne 0 ]; then
      echo "‚ùå LINT FAILED - Attempting auto-fix..."
      yarn lint --fix src/features/todo-list/domain/use-cases/create-todo.ts
      if [ $? -ne 0 ]; then
        echo "‚ùå AUTO-FIX FAILED - Manual intervention required"
        exit 1
      fi
    fi
    echo "‚úÖ Lint passed"

    echo "üß™ Running tests..."
    yarn test src/features/todo-list/domain/use-cases/create-todo.test.ts
    echo "‚úÖ Tests passed"

    echo "üì¶ Staging changes..."
    git add src/features/todo-list/domain/use-cases/create-todo.ts

    echo "üíæ Creating commit..."
    git commit -m "feat(todo-list): add create todo use case"
    echo "‚úÖ Successfully committed"

  completeTodo: |
    echo "üîç Running lint check for complete-todo..."
    yarn lint src/features/todo-list/domain/use-cases/complete-todo.ts
    if [ $? -ne 0 ]; then
      echo "‚ùå LINT FAILED - Attempting auto-fix..."
      yarn lint --fix src/features/todo-list/domain/use-cases/complete-todo.ts
      if [ $? -ne 0 ]; then
        echo "‚ùå AUTO-FIX FAILED - Manual intervention required"
        exit 1
      fi
    fi
    echo "‚úÖ Lint passed"

    echo "üß™ Running tests..."
    yarn test src/features/todo-list/domain/use-cases/complete-todo.test.ts
    echo "‚úÖ Tests passed"

    echo "üì¶ Staging changes..."
    git add src/features/todo-list/domain/use-cases/complete-todo.ts

    echo "üíæ Creating commit..."
    git commit -m "feat(todo-list): add complete todo use case"
    echo "‚úÖ Successfully committed"

implementationOrder:
  - step: 1
    description: "Create folder structure"
    command: "mkdir -p src/features/todo-list/domain/{errors,use-cases,test}"

  - step: 2
    description: "Create domain errors"
    files:
      - "todo-not-found-error.ts"
      - "todo-already-completed-error.ts"
      - "invalid-todo-title-error.ts"
      - "todo-limit-exceeded-error.ts"

  - step: 3
    description: "Create use case interfaces"
    files:
      - "create-todo.ts"
      - "complete-todo.ts"
      - "delete-todo.ts"
      - "list-todos.ts"
      - "update-todo.ts"

  - step: 4
    description: "Create test helpers"
    files:
      - "mock-create-todo-use-case.ts"
      - "mock-complete-todo-use-case.ts"
      - "mock-list-todos-use-case.ts"

  - step: 5
    description: "Run full validation"
    command: |
      yarn lint src/features/todo-list/domain/
      yarn test src/features/todo-list/domain/