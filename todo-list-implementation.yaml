# AI-NOTE: This YAML file is the single source of truth for generating domain layers.
# When creating a feature implementation, you MUST adhere to the structure and rules defined here.
version: '3.0.0'
# AI-NOTE: Update these fields to describe the specific feature.
metadata:
  title: 'TodoList Domain Layer - Clean Architecture'
  description: 'TDD template for todo list feature following the master template rules.'
  source: 'TODO_DOMAIN_TEMPLATE.yaml'
  # AI-NOTE: This should be replaced with the current date, e.g., YYYY-MM-DD.
  lastUpdated: '2025-09-16'

# AI-NOTE: Replace __FEATURE_NAME_KEBAB_CASE__ with the feature name.
structure:
  basePath: 'src/features/todo-list/domain'
  folders:
    - 'errors'      # Feature-specific errors
    - 'use-cases'   # Feature use case interfaces
    - 'test'        # Feature test helpers

# ------------------------------------------------------------------------------
# AI-NOTE: IMMUTABLE SECTIONS AHEAD.
# The sections from here until 'steps' are architectural rules.
# You MUST copy them verbatim into the implementation file without ANY modification.
# ------------------------------------------------------------------------------

layer_rules:
  can_import_from_domain:
    - 'Data Layer - Implements the use case interfaces'
    - 'Presentation Layer - Uses domain types and calls use cases'
    - 'Infrastructure Layer - May use domain types for adapters'
    - 'Main/Factory Layer - Wires everything together, knows all layers'
    - 'Test Files - Can import domain types and interfaces for testing'

  cannot_import_from_domain:
    - 'External Libraries - Should never know about domain'
    - 'Node Modules - Third-party code should not depend on domain'

  domain_cannot_import_from:
    - 'Any other layer - Domain must be completely independent'
    - 'Data Layer - No implementation details'
    - 'Presentation Layer - No UI concerns'
    - 'Infrastructure Layer - No external dependencies'
    - 'Main Layer - No dependency injection logic'
    - 'External Libraries - No third-party dependencies'

# Domain layer rules from DOMAIN_TEMPLATE.md
domain_rules:
  allowed:
    - 'Simple type definitions (Input/Output types)'
    - 'Use case interfaces (contracts only)'
    - 'Domain-specific error classes'
    - 'Test mock functions'

  forbidden:
    - 'Framework dependencies (React, Next.js, Express)'
    - 'External libraries (axios, fetch, database clients)'
    - 'Implementation details of any kind'
    - 'UI components'
    - 'HTTP/Database/File system operations'
    - 'Environment variables'
    - 'Console.log or any I/O operations'
    - 'Value objects'
    - 'Entities'
    - 'Business rules or business logic'
    - 'Validation logic'
    - 'Calculations or computations'
    - 'Any behavior beyond type definitions and interfaces'

# Use case rules from DOMAIN_TEMPLATE.md
use_case_rules:
  should:
    - 'Define only interfaces/contracts, not implementations'
    - 'Have EXACTLY ONE responsibility (one business operation)'
    - 'Do ONE thing and ONE thing only (never multiple operations)'
    - 'Return domain types or primitives'
    - 'Be named with verbs (CreateUser, AuthenticateUser, etc.)'
    - 'Be framework agnostic'

  should_not:
    - 'Contain implementation logic'
    - 'Know about HTTP, databases, or external services'
    - 'Import from data, presentation, or infrastructure layers'
    - 'Have side effects'
    - 'Execute multiple operations (e.g., CreateUserAndSendEmail is wrong)'

# Error rules from DOMAIN_TEMPLATE.md
error_rules:
  should:
    - 'Extend the native Error class'
    - 'Have descriptive names ending with Error'
    - 'Contain meaningful error messages'
    - 'Represent business rule violations'
    - 'Be thrown when domain invariants are violated'

  should_not:
    - 'Contain HTTP status codes'
    - 'Include technical/implementation details'
    - 'Expose sensitive information'
    - 'Import external dependencies'

# Test helper rules from DOMAIN_TEMPLATE.md
test_helper_rules:
  should:
    - 'Create mock/stub implementations of use cases'
    - 'Generate fake test data'
    - 'Be pure functions that return consistent data'
    - 'Help reduce test boilerplate'
    - 'Use ONLY Vitest (Jest is prohibited)'

  should_not:
    - 'Make real API calls or database queries'
    - 'Depend on external services'
    - 'Contain test assertions (those belong in test files)'
    - 'Have side effects or maintain state'
    - 'Use Jest (use Vitest instead)'

# ------------------------------------------------------------------------------
# AI-NOTE: DYNAMIC IMPLEMENTATION SECTION.
# Replicate the generic steps below for each use case, error, and test helper
# required by the feature, replacing the placeholder variables (e.g., __FEATURE_NAME_KEBAB_CASE__).
# ------------------------------------------------------------------------------

steps:
  - id: 'create-structure'
    type: 'folder'
    description: 'Create domain folder structure'
    action:
      create_folders:
        basePath: 'src/features/todo-list/domain'
        folders:
          - 'errors'
          - 'use-cases'
          - 'test'
    validation:
      command: 'ls -la src/features/todo-list/domain'
      expected: 'All three folders exist'
    validation_script: |
      echo "🔍 Checking domain folder structure..."
      if [ ! -d "src/features/todo-list/domain" ]; then
        echo "❌ Domain folder does not exist"
        exit 1
      fi
      if [ ! -d "src/features/todo-list/domain/errors" ]; then
        echo "❌ errors folder does not exist"
        exit 1
      fi
      if [ ! -d "src/features/todo-list/domain/use-cases" ]; then
        echo "❌ use-cases folder does not exist"
        exit 1
      fi
      if [ ! -d "src/features/todo-list/domain/test" ]; then
        echo "❌ test folder does not exist"
        exit 1
      fi
      echo "✅ All domain folders exist"

      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): create domain folder structure"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  # Step 2: Create todo use case
  - id: 'create-use-case-create-todo'
    type: 'file'
    description: 'Create CreateTodo use case interface'
    path: 'src/features/todo-list/domain/use-cases/create-todo.ts'
    template: |
      /**
       * Input parameters for CreateTodoUseCase
       */
      export type CreateTodoInput = {
        tenantId: string
        title: string
        description?: string
      }

      /**
       * Output type for CreateTodoUseCase
       */
      export type CreateTodoOutput = {
        id: string
        tenantId: string
        title: string
        description?: string
        completed: boolean
        createdAt: Date
      }

      /**
       * CreateTodoUseCase interface
       * @description Creates a new todo item for a specific tenant
       */
      export interface CreateTodoUseCase {
        /**
         * Execute the create todo operation
         * @param input - The input parameters
         * @returns Promise with the operation output
         */
        execute: (input: CreateTodoInput) => Promise<CreateTodoOutput>
      }
    validation_script: |
      # AI-NOTE: This script is immutable. Only the commit message placeholder is replaced.
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add create-todo use case"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-use-case-list-todos'
    type: 'file'
    description: 'Create ListTodos use case interface'
    path: 'src/features/todo-list/domain/use-cases/list-todos.ts'
    template: |
      /**
       * Input parameters for ListTodosUseCase
       */
      export type ListTodosInput = {
        tenantId: string
        completed?: boolean
      }

      /**
       * Output type for ListTodosUseCase
       */
      export type ListTodosOutput = {
        todos: Array<{
          id: string
          tenantId: string
          title: string
          description?: string
          completed: boolean
          createdAt: Date
          updatedAt?: Date
        }>
      }

      /**
       * ListTodosUseCase interface
       * @description Lists all todo items for a specific tenant
       */
      export interface ListTodosUseCase {
        /**
         * Execute the list todos operation
         * @param input - The input parameters
         * @returns Promise with the operation output
         */
        execute: (input: ListTodosInput) => Promise<ListTodosOutput>
      }
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add list-todos use case"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-use-case-update-todo'
    type: 'file'
    description: 'Create UpdateTodo use case interface'
    path: 'src/features/todo-list/domain/use-cases/update-todo.ts'
    template: |
      /**
       * Input parameters for UpdateTodoUseCase
       */
      export type UpdateTodoInput = {
        tenantId: string
        todoId: string
        title?: string
        description?: string
        completed?: boolean
      }

      /**
       * Output type for UpdateTodoUseCase
       */
      export type UpdateTodoOutput = {
        id: string
        tenantId: string
        title: string
        description?: string
        completed: boolean
        createdAt: Date
        updatedAt: Date
      }

      /**
       * UpdateTodoUseCase interface
       * @description Updates an existing todo item for a specific tenant
       */
      export interface UpdateTodoUseCase {
        /**
         * Execute the update todo operation
         * @param input - The input parameters
         * @returns Promise with the operation output
         */
        execute: (input: UpdateTodoInput) => Promise<UpdateTodoOutput>
      }
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add update-todo use case"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-use-case-delete-todo'
    type: 'file'
    description: 'Create DeleteTodo use case interface'
    path: 'src/features/todo-list/domain/use-cases/delete-todo.ts'
    template: |
      /**
       * Input parameters for DeleteTodoUseCase
       */
      export type DeleteTodoInput = {
        tenantId: string
        todoId: string
      }

      /**
       * Output type for DeleteTodoUseCase
       */
      export type DeleteTodoOutput = {
        success: boolean
      }

      /**
       * DeleteTodoUseCase interface
       * @description Deletes a todo item for a specific tenant
       */
      export interface DeleteTodoUseCase {
        /**
         * Execute the delete todo operation
         * @param input - The input parameters
         * @returns Promise with the operation output
         */
        execute: (input: DeleteTodoInput) => Promise<DeleteTodoOutput>
      }
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add delete-todo use case"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  # Step 3: Create error classes
  - id: 'create-error-todo-not-found'
    type: 'file'
    description: 'Create todo-not-found domain error'
    path: 'src/features/todo-list/domain/errors/todo-not-found.ts'
    template: |
      /**
       * Error thrown when the requested todo item does not exist
       * @extends Error
       */
      export class TodoNotFoundError extends Error {
        constructor() {
          super('Todo item not found')
          this.name = 'TodoNotFoundError'
        }
      }
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add todo-not-found domain error"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-error-unauthorized-tenant-access'
    type: 'file'
    description: 'Create unauthorized-tenant-access domain error'
    path: 'src/features/todo-list/domain/errors/unauthorized-tenant-access.ts'
    template: |
      /**
       * Error thrown when a user tries to access resources from another tenant
       * @extends Error
       */
      export class UnauthorizedTenantAccessError extends Error {
        constructor() {
          super('Unauthorized access to tenant resources')
          this.name = 'UnauthorizedTenantAccessError'
        }
      }
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add unauthorized-tenant-access domain error"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-error-invalid-todo-data'
    type: 'file'
    description: 'Create invalid-todo-data domain error'
    path: 'src/features/todo-list/domain/errors/invalid-todo-data.ts'
    template: |
      /**
       * Error thrown when todo data validation fails
       * @extends Error
       */
      export class InvalidTodoDataError extends Error {
        constructor() {
          super('Invalid todo data provided')
          this.name = 'InvalidTodoDataError'
        }
      }
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "feat(todo-list): add invalid-todo-data domain error"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  # Step 4: Create test helpers
  - id: 'create-test-helper-create-todo'
    type: 'file'
    description: 'Create mock for CreateTodo use case'
    path: 'src/features/todo-list/domain/test/mock-create-todo-use-case.ts'
    template: |
      import { vi } from 'vitest'
      import type { CreateTodoUseCase, CreateTodoInput, CreateTodoOutput } from '../use-cases/create-todo'

      /**
       * Creates a mock instance of CreateTodoInput
       * @returns Mock input for testing
       */
      export const mockCreateTodoInput = (): CreateTodoInput => ({
        tenantId: 'tenant-123',
        title: 'Test Todo Item',
        description: 'This is a test todo item'
      })

      /**
       * Creates a mock instance of CreateTodoOutput
       * @returns Mock output for testing
       */
      export const mockCreateTodoOutput = (): CreateTodoOutput => ({
        id: 'todo-123',
        tenantId: 'tenant-123',
        title: 'Test Todo Item',
        description: 'This is a test todo item',
        completed: false,
        createdAt: new Date('2025-01-01T00:00:00Z')
      })

      /**
       * Creates a mock instance of CreateTodoUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockCreateTodoUseCase = (): CreateTodoUseCase => ({
        execute: vi.fn()
      })
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "test(todo-list): add create-todo use case test helpers"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-test-helper-list-todos'
    type: 'file'
    description: 'Create mock for ListTodos use case'
    path: 'src/features/todo-list/domain/test/mock-list-todos-use-case.ts'
    template: |
      import { vi } from 'vitest'
      import type { ListTodosUseCase, ListTodosInput, ListTodosOutput } from '../use-cases/list-todos'

      /**
       * Creates a mock instance of ListTodosInput
       * @returns Mock input for testing
       */
      export const mockListTodosInput = (): ListTodosInput => ({
        tenantId: 'tenant-123',
        completed: false
      })

      /**
       * Creates a mock instance of ListTodosOutput
       * @returns Mock output for testing
       */
      export const mockListTodosOutput = (): ListTodosOutput => ({
        todos: [
          {
            id: 'todo-123',
            tenantId: 'tenant-123',
            title: 'Test Todo Item 1',
            description: 'This is a test todo item',
            completed: false,
            createdAt: new Date('2025-01-01T00:00:00Z')
          },
          {
            id: 'todo-456',
            tenantId: 'tenant-123',
            title: 'Test Todo Item 2',
            completed: true,
            createdAt: new Date('2025-01-02T00:00:00Z'),
            updatedAt: new Date('2025-01-03T00:00:00Z')
          }
        ]
      })

      /**
       * Creates a mock instance of ListTodosUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockListTodosUseCase = (): ListTodosUseCase => ({
        execute: vi.fn()
      })
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "test(todo-list): add list-todos use case test helpers"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-test-helper-update-todo'
    type: 'file'
    description: 'Create mock for UpdateTodo use case'
    path: 'src/features/todo-list/domain/test/mock-update-todo-use-case.ts'
    template: |
      import { vi } from 'vitest'
      import type { UpdateTodoUseCase, UpdateTodoInput, UpdateTodoOutput } from '../use-cases/update-todo'

      /**
       * Creates a mock instance of UpdateTodoInput
       * @returns Mock input for testing
       */
      export const mockUpdateTodoInput = (): UpdateTodoInput => ({
        tenantId: 'tenant-123',
        todoId: 'todo-123',
        title: 'Updated Todo Item',
        completed: true
      })

      /**
       * Creates a mock instance of UpdateTodoOutput
       * @returns Mock output for testing
       */
      export const mockUpdateTodoOutput = (): UpdateTodoOutput => ({
        id: 'todo-123',
        tenantId: 'tenant-123',
        title: 'Updated Todo Item',
        description: 'This is an updated todo item',
        completed: true,
        createdAt: new Date('2025-01-01T00:00:00Z'),
        updatedAt: new Date('2025-01-02T00:00:00Z')
      })

      /**
       * Creates a mock instance of UpdateTodoUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockUpdateTodoUseCase = (): UpdateTodoUseCase => ({
        execute: vi.fn()
      })
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "test(todo-list): add update-todo use case test helpers"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

  - id: 'create-test-helper-delete-todo'
    type: 'file'
    description: 'Create mock for DeleteTodo use case'
    path: 'src/features/todo-list/domain/test/mock-delete-todo-use-case.ts'
    template: |
      import { vi } from 'vitest'
      import type { DeleteTodoUseCase, DeleteTodoInput, DeleteTodoOutput } from '../use-cases/delete-todo'

      /**
       * Creates a mock instance of DeleteTodoInput
       * @returns Mock input for testing
       */
      export const mockDeleteTodoInput = (): DeleteTodoInput => ({
        tenantId: 'tenant-123',
        todoId: 'todo-123'
      })

      /**
       * Creates a mock instance of DeleteTodoOutput
       * @returns Mock output for testing
       */
      export const mockDeleteTodoOutput = (): DeleteTodoOutput => ({
        success: true
      })

      /**
       * Creates a mock instance of DeleteTodoUseCase
       * @returns Mocked use case with vitest functions
       */
      export const mockDeleteTodoUseCase = (): DeleteTodoUseCase => ({
        execute: vi.fn()
      })
    validation_script: |
      echo "🔍 Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          echo "📋 Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "✅ Lint passed"

      echo "🧪 Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        echo "📋 Check the test output above for details"
        exit 1
      fi
      echo "✅ Tests passed"

      echo "📦 Staging changes..."
      git add .

      echo "💾 Creating commit..."
      git commit -m "test(todo-list): add delete-todo use case test helpers"
      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        echo "📋 Review the status above and fix any issues"
        exit 1
      fi
      echo "✅ Successfully committed"

# ------------------------------------------------------------------------------
# AI-NOTE: IMMUTABLE DOCUMENTATION SECTIONS AHEAD.
# Copy these sections verbatim. The [placeholders] inside the commands
# are for HUMAN examples and MUST NOT be replaced by the AI.
# ------------------------------------------------------------------------------

troubleshooting:
  lint_fails:
    - 'DO NOT commit - Fix all lint errors first'
    - 'Check for unused imports'
    - 'Verify proper TypeScript types'
    - 'Ensure no console.log statements'
    - 'Run yarn lint --fix to auto-fix when possible'

  tests_fail:
    - 'DO NOT commit - All tests must pass'
    - 'Check if mocks match the actual interfaces'
    - 'Verify Input/Output types are correct'
    - 'Ensure test coverage meets requirements'
    - 'Run specific test: yarn test [test-file-path]'

  typescript_fails:
    - 'Check all type definitions match'
    - 'Ensure no missing imports'
    - 'Verify interface implementations are complete'
    - 'Run yarn tsc --noEmit to check types'

# Refactoring checklist from DOMAIN_TEMPLATE.md
refactoring:
  before_refactoring: |
    # Check current status and differences
    echo "📊 Checking current changes..."
    git status
    git diff

    # Ensure clean working directory
    echo "✅ Saving current work..."
    git stash save "WIP: before refactoring"

    # Create refactoring branch
    echo "🌿 Creating refactor branch..."
    git checkout -b refactor/[feature-name]

    # Run tests to ensure starting point is stable
    echo "🧪 Validating current state..."
    yarn test --run
    if [ $? -ne 0 ]; then
      echo "❌ Tests failing before refactor - fix first!"
      exit 1
    fi
    echo "✅ Ready to refactor"

  during_refactoring: |
    # After each change, check what was modified
    echo "🔍 Reviewing changes..."
    git diff --stat
    git diff

    # Validate the change
    yarn lint && yarn test --run

    # Commit atomically
    git add -p  # Interactive staging to commit only related changes
    git commit -m "refactor([feature-name]): [specific change description]"

    # Show what was changed in the last commit
    git show --stat

  common_scenarios:
    - name: 'Splitting a use case'
      wrong_example: |
        interface CreateUserAndSendEmailUseCase {
          execute: (input: CreateUserAndSendEmailInput) => Promise<CreateUserAndSendEmailOutput>
        }
      correct_example: |
        interface CreateUserUseCase {
          execute: (input: CreateUserInput) => Promise<CreateUserOutput>
        }
        interface SendWelcomeEmailUseCase {
          execute: (input: SendWelcomeEmailInput) => Promise<SendWelcomeEmailOutput>
        }
      script: |
        # Split the combined use case into separate files
        # Update all imports and references
        # Run tests after each change

    - name: 'Renaming for clarity'
      script: |
        # 1. See all occurrences before changing
        echo "🔍 Finding all occurrences of [OldName]..."
        grep -r "[OldName]" src/features/[feature-name]/

        # 2. Perform the rename
        echo "✏️ Renaming [OldName] to [NewName]..."
        # Update files...

        # 3. Review the changes
        echo "📊 Reviewing rename changes..."
        git diff --word-diff

        # 4. Validate nothing broke
        yarn lint && yarn test --run

        # 5. Check if rename is complete
        echo "🔍 Ensuring no [OldName] remains..."
        grep -r "[OldName]" src/features/[feature-name]/
        if [ $? -eq 0 ]; then
          echo "⚠️ Warning: [OldName] still found in some files"
        fi

        # 6. Commit the rename
        git add .
        git commit -m "refactor([feature-name]): rename [OldName] to [NewName] for clarity"

        # 7. Show the final diff
        git show --stat

# Recovery steps from DOMAIN_TEMPLATE.md
recovery:
  accidental_commit: |
    # Revert the last commit but keep changes
    git reset --soft HEAD~1

    # Fix the issues
    # ... make corrections ...

    # Re-run validation
    yarn lint
    yarn test --coverage

    # Commit again with fixed code
    git add .
    git commit -m "[original message] - fixed"

  domain_polluted: |
    # 1. Identify violations in domain
    echo "🔍 Checking for domain violations..."
    git diff src/features/[feature-name]/domain/

    # Check for forbidden patterns
    echo "⚠️ Checking for business logic..."
    grep -r "class.*{.*calculate\|validate\|process" src/features/[feature-name]/domain/

    echo "⚠️ Checking for external dependencies..."
    grep -r "import.*axios\|fetch\|http" src/features/[feature-name]/domain/

    echo "⚠️ Checking for console logs..."
    grep -r "console\." src/features/[feature-name]/domain/

    # 2. Show what needs to be moved
    git diff src/features/[feature-name]/domain/ --name-only

    # 3. After moving code to proper layers
    echo "✅ Validating domain is clean..."
    yarn lint
    yarn test --run

    # 4. Commit the cleanup
    git add .
    git diff --staged --stat
    git commit -m "refactor([feature-name]): remove business logic from domain layer"

# AI Guidelines from DOMAIN_TEMPLATE.md
ai_guidelines:
  - 'Always validate before committing: Run lint first, Run tests second, Only commit if both pass'
  - 'If generation fails: Identify the specific error, Fix only that error, Re-run validation, Do NOT proceed until fixed'
  - 'Follow the principle: One use case = One file = One responsibility'
  - 'If tempted to add "And" in a use case name, split it'
  - 'When in doubt: Choose simplicity over complexity, Split rather than combine, Ask for clarification rather than assume'
  - 'MUST generate different case styles from the input names (e.g., "Add Item To Cart" becomes: PascalCase=AddItemToCart, kebab-case=add-item-to-cart, lower case=add item to cart).'
  - 'MUST replace ALL placeholder variables (like __FEATURE_NAME_KEBAB_CASE__) with actual values'
  - 'MUST NOT leave any placeholder variables in the final implementation'
  - 'MUST NOT replace any [placeholders] found inside documentation sections like refactoring or recovery'
  - 'MUST use vitest, NOT jest'
  - 'MUST follow all domain rules - no business logic, no external dependencies'