---
version: 3.0.0
metadata:
  title: __FEATURE_NAME_PASCAL_CASE__ Clean Architecture Implementation
  description: Clean Architecture template for __FEATURE_NAME_LOWER_CASE__ feature
    following master template rules.
  source: TEMPLATE.yaml
  lastUpdated: __CURRENT_DATE__
  layers:
    - domain
  ubiquitousLanguage:
    - term: __ENTITY_NAME__
      definition: __ENTITY_DEFINITION_IN_BUSINESS_CONTEXT__
    - term: __VALUE_OBJECT_NAME__
      definition: __VALUE_OBJECT_BUSINESS_MEANING__
    - term: __DOMAIN_EVENT__
      definition: __EVENT_BUSINESS_SIGNIFICANCE__
structure:
  basePath: src/features/__FEATURE_NAME_KEBAB_CASE__
  layers:
    domain:
      folders:
        - errors
        - use-cases
        - test
architecture:
  dependency_rules:
    domain:
      can_import_from: []
      cannot_import_from:
        - application
        - infrastructure
        - presentation
        - external
  principles:
    - "Independence: Business rules don't know about outside world"
    - "Testability: Business rules can be tested without UI, Database, Web
      Server, etc."
    - "Flexibility: UI, Database, and any external agency are plugins"
    - "Separation: Business rules are the core, everything else is detail"
domain_rules:
  allowed:
    - Simple type definitions (Input/Output types)
    - Use case interfaces (contracts only)
    - Domain-specific error classes
    - Test mock functions
  forbidden:
    - Framework dependencies (React, Next.js, Express)
    - External libraries (axios, fetch, database clients)
    - Implementation details of any kind
    - UI components
    - HTTP/Database/File system operations
    - Environment variables
    - Console.log or any I/O operations
    - Value objects
    - Entities
    - Business rules or business logic
    - Validation logic
    - Calculations or computations
    - Any behavior beyond type definitions and interfaces
use_case_rules:
  should:
    - Define only interfaces/contracts, not implementations
    - Have EXACTLY ONE responsibility (one business operation)
    - Do ONE thing and ONE thing only (never multiple operations)
    - Return domain types or primitives
    - Be named with verbs (CreateUser, AuthenticateUser, etc.)
    - Be framework agnostic
  should_not:
    - Contain implementation logic
    - Know about HTTP, databases, or external services
    - Import from data, presentation, or infrastructure layers
    - Have side effects
    - Execute multiple operations (e.g., CreateUserAndSendEmail is wrong)
error_rules:
  should:
    - Extend the native Error class
    - Have descriptive names ending with Error
    - Contain meaningful error messages
    - Represent business rule violations
    - Be thrown when domain invariants are violated
  should_not:
    - Contain HTTP status codes
    - Include technical/implementation details
    - Expose sensitive information
    - Import external dependencies
test_helper_rules:
  should:
    - Create mock/stub implementations of use cases
    - Generate fake test data
    - Be pure functions that return consistent data
    - Help reduce test boilerplate
    - Use ONLY Vitest (Jest is prohibited)
  should_not:
    - Make real API calls or database queries
    - Depend on external services
    - Contain test assertions (those belong in test files)
    - Have side effects or maintain state
    - Use Jest (use Vitest instead)
validation_scripts:
  lint_check: |
    echo "🔍 Running lint check..."
    yarn lint
    if [ $? -ne 0 ]; then
      echo "❌ LINT FAILED - Attempting auto-fix..."
      yarn lint --fix
      if [ $? -ne 0 ]; then
        echo "❌ AUTO-FIX FAILED - Manual intervention required"
        exit 1
      fi
      echo "✅ Lint errors auto-fixed, validating again..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "❌ LINT STILL FAILING - Manual fixes needed"
        exit 1
      fi
    fi
    echo "✅ Lint passed"
  test_check: |
    echo "🧪 Running tests with coverage..."
    yarn test --coverage
    if [ $? -ne 0 ]; then
      echo "❌ TESTS FAILED - Running specific test to identify issue..."
      yarn test --run --reporter=verbose
      echo "❌ Tests must be fixed manually"
      exit 1
    fi
    echo "✅ Tests passed"
  stage_commit: |
    echo "📦 Staging changes..."
    git add .

    echo "💾 Creating commit..."
    git commit -m "$COMMIT_MESSAGE"
    if [ $? -ne 0 ]; then
      echo "❌ COMMIT FAILED - Checking git status..."
      git status
      exit 1
    fi
    echo "✅ Successfully committed"
  verify_deletion: |
    echo "🗑️ Verifying file deletion..."
    if [ -f "$FILE_PATH" ]; then
      echo "❌ ERROR: File was not deleted."
      exit 1
    fi
    echo "✅ File successfully deleted."
  verify_folders: |
    echo "✅ Verifying folder structure..."
    for folder in $FOLDERS; do
      if [ ! -d "$folder" ]; then
        echo "❌ ERROR: Folder $folder was not created."
        exit 1
      fi
    done
    echo "✅ All folders exist."
step_defaults:
  status: PENDING
  rlhf_score: null
  execution_log: ""
reference_patterns:
  clean_architecture:
    type: external_pattern
    source: context7
    query: clean architecture use case
    url: https://github.com/...
    description: Following Clean Architecture pattern.
  ddd_pattern:
    type: external_pattern
    source: context7
    query: domain driven design
    url: https://github.com/...
    description: Following DDD patterns.
  tdd_pattern:
    type: external_pattern
    source: context7
    query: test driven development
    url: https://github.com/...
    description: Following TDD patterns.
steps:
  - id: create-feature-branch
    type: branch
    description: Create a new feature branch for __FEATURE_NAME_PASCAL_CASE__
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: internal_guideline
        source: GIT_WORKFLOW.md
        description: Following git branching best practices for feature development.
    action:
      branch_name: feat/__FEATURE_NAME_KEBAB_CASE__
    validation_script: >
      echo "🌿 Creating feature branch..."

      # Check if we are on a clean state

      if [ -n "$(git status --porcelain)" ]; then
        echo "⚠️ Warning: You have uncommitted changes. Stashing them..."
        git stash save "Auto-stash before creating feature branch for __FEATURE_NAME_KEBAB_CASE__"
      fi


      # Get current branch to use as base

      CURRENT_BRANCH=$(git branch --show-current)

      echo "📍 Current branch: $CURRENT_BRANCH"


      # Create and checkout new feature branch

      BRANCH_NAME="feat/__FEATURE_NAME_KEBAB_CASE__"


      # Check if branch already exists

      if git show-ref --quiet refs/heads/$BRANCH_NAME; then
        echo "⚠️ Branch $BRANCH_NAME already exists. Checking out..."
        git checkout $BRANCH_NAME
      else
        echo "🌿 Creating new branch: $BRANCH_NAME"
        git checkout -b $BRANCH_NAME
      fi


      # Verify we're on the correct branch

      CURRENT=$(git branch --show-current)

      if [ "$CURRENT" != "$BRANCH_NAME" ]; then
        echo "❌ ERROR: Failed to switch to branch $BRANCH_NAME"
        exit 1
      fi


      echo "✅ Successfully created and switched to branch: $BRANCH_NAME"


      # If we had stashed changes, inform the user

      if git stash list | grep -q "Auto-stash before creating feature branch"; then
        echo "💡 Note: You have stashed changes. Run 'git stash pop' to restore them if needed."
      fi
  - id: create-__LAYER__-structure
    type: folder
    description: Create __LAYER__ layer folder structure
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: internal_guideline
        source: ARCHITECTURE.md
        description: Following Clean Architecture __LAYER__ layer structure.
    action:
      create_folders:
        basePath: src/features/__FEATURE_NAME_KEBAB_CASE__/__LAYER__
        folders:
          - errors
          - use-cases
          - test
    validation_script: |
      BASE_PATH="src/features/__FEATURE_NAME_KEBAB_CASE__/__LAYER__"
      FOLDERS="$BASE_PATH/errors $BASE_PATH/use-cases $BASE_PATH/test"
      echo "✅ Verifying __LAYER__ folder structure..."
      for folder in $FOLDERS; do
        if [ ! -d "$folder" ]; then
          echo "❌ ERROR: Folder $folder was not created."
          exit 1
        fi
      done
      echo "✅ All __LAYER__ folders exist."
  - id: create-use-case-__ACTION_ENTITY_KEBAB_CASE__
    type: create_file
    description: Create __ACTION_ENTITY_PASCAL_CASE__ use case interface
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: external_pattern
        source: context7
        query: clean architecture use case
        url: https://github.com/...
        description: Following Clean Architecture pattern.
      - type: internal_code_analysis
        source: serena
        tool: find_symbol
        query: "*UseCase"
        description: Consistent with existing use case interfaces.
    path: src/features/__FEATURE_NAME_KEBAB_CASE__/__LAYER__/use-cases/__ACTION_ENTITY_KEBAB_CASE__.ts
    template: >
      /**
       * Input parameters for __ACTION_ENTITY_PASCAL_CASE__UseCase
       * Following Clean Architecture principles - pure domain types
       * @domainConcept __UBIQUITOUS_LANGUAGE_TERM__
       */
      export type __ACTION_ENTITY_PASCAL_CASE__Input = {
        __USE_CASE_INPUT_FIELDS__
      }


      /**
       * Output type for __ACTION_ENTITY_PASCAL_CASE__UseCase
       * Represents the business outcome of the operation
       * @domainConcept __UBIQUITOUS_LANGUAGE_TERM__
       */
      export type __ACTION_ENTITY_PASCAL_CASE__Output = {
        __USE_CASE_OUTPUT_FIELDS__
      }


      /**
       * __ACTION_ENTITY_PASCAL_CASE__UseCase interface
       * @description __USE_CASE_DESCRIPTION__
       * @pattern Command Pattern - Single Responsibility Principle
       * @layer Domain Layer - Framework agnostic business interface
       */
      export interface __ACTION_ENTITY_PASCAL_CASE__UseCase {
        /**
         * Execute the __ACTION_ENTITY_LOWER_CASE__ operation
         * @param input - The input parameters
         * @returns Promise with the operation output
         * @throws Domain errors when business rules are violated
         */
        execute: (input: __ACTION_ENTITY_PASCAL_CASE__Input) => Promise<__ACTION_ENTITY_PASCAL_CASE__Output>
      }
    validation_script: >
      echo "🔍 Running lint check..."

      yarn lint

      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi

      echo "✅ Lint passed"


      echo "🧪 Running tests with coverage..."

      yarn test --coverage

      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "❌ Tests must be fixed manually"
        exit 1
      fi

      echo "✅ Tests passed"


      echo "📦 Staging changes..."

      git add .


      echo "💾 Creating commit..."

      git commit -m "feat(__FEATURE_NAME_KEBAB_CASE__): add __ACTION_ENTITY_KEBAB_CASE__ use case"

      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED - Checking git status..."
        git status
        exit 1
      fi

      echo "✅ Successfully committed"
  - id: create-error-__ERROR_NAME_KEBAB_CASE__
    type: create_file
    description: Create __ERROR_NAME_KEBAB_CASE__ error class
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: external_pattern
        source: context7
        query: domain driven design error handling
        url: https://github.com/...
        description: Following DDD error handling patterns.
      - type: internal_code_analysis
        source: serena
        tool: find_symbol
        query: "*Error"
        description: Consistent with existing domain errors.
    path: src/features/__FEATURE_NAME_KEBAB_CASE__/__LAYER__/errors/__ERROR_NAME_KEBAB_CASE__.ts
    template: >
      /**
       * Domain error thrown when __ERROR_DESCRIPTION__
       * Represents a business rule violation in the __FEATURE_NAME__ bounded context
       * @domainConcept __UBIQUITOUS_LANGUAGE_TERM__
       * @pattern Domain Error - Clean Architecture principle
       * @extends Error
       */
      export class __ERROR_NAME_PASCAL_CASE__Error extends Error {
        constructor() {
          super('__ERROR_MESSAGE__')
          this.name = '__ERROR_NAME_PASCAL_CASE__Error'
        }
      }
    validation_script: >
      echo "🔍 Running lint check..."

      yarn lint

      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "❌ AUTO-FIX FAILED - Manual intervention required"
          exit 1
        fi
        echo "✅ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "❌ LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi

      echo "✅ Lint passed"


      echo "🧪 Running tests with coverage..."

      yarn test --coverage

      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED"
        exit 1
      fi

      echo "✅ Tests passed"


      echo "📦 Staging changes..."

      git add .


      echo "💾 Creating commit..."

      git commit -m "feat(__FEATURE_NAME_KEBAB_CASE__): add __ERROR_NAME_KEBAB_CASE__ error class"

      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED"
        exit 1
      fi

      echo "✅ Successfully committed"
  - id: create-test-helper-__ACTION_ENTITY_KEBAB_CASE__
    type: create_file
    description: Create mock for __ACTION_ENTITY_PASCAL_CASE__ use case
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: external_pattern
        source: context7
        query: test driven development mocks
        url: https://github.com/...
        description: Following TDD mock patterns.
      - type: internal_code_analysis
        source: serena
        tool: find_symbol
        query: mock*
        description: Consistent with existing test helpers.
    path: src/features/__FEATURE_NAME_KEBAB_CASE__/__LAYER__/test/mock-__ACTION_ENTITY_KEBAB_CASE__-use-case.ts
    template: >
      import { vi } from 'vitest'

      import type { __ACTION_ENTITY_PASCAL_CASE__UseCase, __ACTION_ENTITY_PASCAL_CASE__Input, __ACTION_ENTITY_PASCAL_CASE__Output } from '../use-cases/__ACTION_ENTITY_KEBAB_CASE__'


      /**
       * Creates a mock instance of __ACTION_ENTITY_PASCAL_CASE__Input
       * @returns Mock input for testing
       */
      export const mock__ACTION_ENTITY_PASCAL_CASE__Input = (): __ACTION_ENTITY_PASCAL_CASE__Input => ({
        __MOCK_INPUT_DATA__
      })


      /**
       * Creates a mock instance of __ACTION_ENTITY_PASCAL_CASE__Output
       * @returns Mock output for testing
       */
      export const mock__ACTION_ENTITY_PASCAL_CASE__Output = (): __ACTION_ENTITY_PASCAL_CASE__Output => ({
        __MOCK_OUTPUT_DATA__
      })


      /**
       * Creates a mock instance of __ACTION_ENTITY_PASCAL_CASE__UseCase
       * @returns Mocked use case with vitest functions
       */
      export const mock__ACTION_ENTITY_PASCAL_CASE__UseCase = (): __ACTION_ENTITY_PASCAL_CASE__UseCase => ({
        execute: vi.fn()
      })
    validation_script: >
      echo "🔍 Running lint check..."

      yarn lint

      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED"
        exit 1
      fi

      echo "✅ Lint passed"


      echo "🧪 Running tests..."

      yarn test --coverage

      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED"
        exit 1
      fi

      echo "✅ Tests passed"


      echo "📦 Staging changes..."

      git add .


      echo "💾 Creating commit..."

      git commit -m "test(__FEATURE_NAME_KEBAB_CASE__): add __ACTION_ENTITY_KEBAB_CASE__ use case test helpers"

      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED"
        exit 1
      fi

      echo "✅ Successfully committed"
  - id: refactor-__FILE_TO_MODIFY_KEBAB_CASE__
    type: refactor_file
    description: Refactor __FILE_TO_MODIFY_PASCAL_CASE__ to incorporate new logic
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: internal_code_analysis
        source: serena
        tool: find_referencing_symbols
        query: __SYMBOL_BEING_CHANGED__
        description: Refactoring affected files.
    path: src/features/__FEATURE_NAME_KEBAB_CASE__/path/to/__FILE_TO_MODIFY_KEBAB_CASE__.ts
    template: |
      <<<REPLACE>>>
      // Old code to be replaced
      export type OldType = {
        fieldA: string;
      }
      <<</REPLACE>>>
      <<<WITH>>>
      // New code
      export type OldType = {
        fieldA: string;
        newFieldB: number;
      }
      <<</WITH>>>
    validation_script: >
      echo "🔍 Running lint check..."

      yarn lint

      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED"
        exit 1
      fi

      echo "✅ Lint passed"


      echo "🧪 Running tests..."

      yarn test --coverage

      if [ $? -ne 0 ]; then
        echo "❌ TESTS FAILED"
        exit 1
      fi

      echo "✅ Tests passed"


      echo "📦 Staging changes..."

      git add .


      echo "💾 Creating commit..."

      git commit -m "refactor(__FEATURE_NAME_KEBAB_CASE__): update __FILE_TO_MODIFY_KEBAB_CASE__"

      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED"
        exit 1
      fi

      echo "✅ Successfully committed"
  - id: delete-file-__FILE_TO_DELETE_KEBAB_CASE__
    type: delete_file
    description: Delete file __FILE_TO_DELETE_PASCAL_CASE__ due to generation error
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: internal_correction
        source: self
        description: Deleting artifact from failed step.
    path: src/features/__FEATURE_NAME_KEBAB_CASE__/path/to/__FILE_TO_DELETE_KEBAB_CASE__.ts
    validation_script: >
      echo "🗑️ Verifying file deletion..."

      if [ -f "src/features/__FEATURE_NAME_KEBAB_CASE__/path/to/__FILE_TO_DELETE_KEBAB_CASE__.ts" ]; then
        echo "❌ ERROR: File was not deleted."
        exit 1
      fi

      echo "✅ File successfully deleted."


      echo "🔍 Running lint check..."

      yarn lint

      if [ $? -ne 0 ]; then
        echo "❌ LINT FAILED"
        exit 1
      fi

      echo "✅ Lint passed."


      echo "📦 Staging changes..."

      git add .


      echo "💾 Creating commit..."

      git commit -m "chore(__FEATURE_NAME_KEBAB_CASE__): delete broken artifact"

      if [ $? -ne 0 ]; then
        echo "❌ COMMIT FAILED"
        exit 1
      fi

      echo "✅ Successfully committed."
  - id: create-pull-request
    type: pull_request
    description: Create pull request for __FEATURE_NAME_PASCAL_CASE__ implementation
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: internal_guideline
        source: GIT_WORKFLOW.md
        description: Following PR process for feature integration.
    action:
      target_branch: main
      source_branch: feat/__FEATURE_NAME_KEBAB_CASE__
      title: "feat(__FEATURE_NAME_KEBAB_CASE__): implement clean architecture layers"
    validation_script: >
      echo "🚀 Preparing to create pull request..."


      # Push the current branch to remote

      echo "📤 Pushing branch to remote..."

      git push --set-upstream origin feat/__FEATURE_NAME_KEBAB_CASE__

      if [ $? -ne 0 ]; then
        echo "❌ ERROR: Failed to push branch to remote"
        exit 1
      fi


      # Check if gh CLI is available

      if ! command -v gh &> /dev/null; then
        echo "⚠️ GitHub CLI (gh) is not installed."
        echo "📋 Please create PR manually"
        exit 0
      fi


      # Create the pull request

      echo "🔄 Creating pull request..."

      PR_BODY="## Summary


      Implementation of Clean Architecture layers for __FEATURE_NAME_PASCAL_CASE__ feature.


      ### Changes included:

      - Domain layer with use case interfaces

      - Domain errors

      - Test helpers and mocks


      ### Architecture Compliance:

      - ✅ Clean Architecture principles

      - ✅ No dependency violations

      - ✅ All tests passing

      - ✅ Lint checks passed

      - ✅ RLHF score: +2 (PERFECT)


      ### Generated by:

      - Template: TEMPLATE.yaml

      - Date: $(date +%Y-%m-%d)


      ---

      🤖 Generated with spec-kit-clean-architecture"


      gh pr create \
        --base main \
        --head feat/__FEATURE_NAME_KEBAB_CASE__ \
        --title "feat(__FEATURE_NAME_KEBAB_CASE__): implement clean architecture layers" \
        --body "$PR_BODY" \
        --assignee @me

      if [ $? -eq 0 ]; then
        echo "✅ Pull request created successfully!"
        PR_URL=$(gh pr view --json url -q .url)
        echo "📎 Pull Request URL: $PR_URL"
        gh pr view --web
      else
        echo "⚠️ Could not create PR automatically. Please create manually."
      fi
troubleshooting:
  lint_fails:
    - DO NOT commit - Fix all lint errors first
    - Check for unused imports
    - Verify proper TypeScript types
    - Ensure no console.log statements
    - Run yarn lint --fix to auto-fix when possible
  tests_fail:
    - DO NOT commit - All tests must pass
    - Check if mocks match the actual interfaces
    - Verify Input/Output types are correct
    - Ensure test coverage meets requirements
    - "Run specific test: yarn test [test-file-path]"
  typescript_fails:
    - Check all type definitions match
    - Ensure no missing imports
    - Verify interface implementations are complete
    - Run yarn tsc --noEmit to check types
refactoring:
  before_refactoring: |
    # Check current status and differences
    echo "📊 Checking current changes..."
    git status
    git diff

    # Ensure clean working directory
    echo "✅ Saving current work..."
    git stash save "WIP: before refactoring"

    # Create refactoring branch
    echo "🌿 Creating refactor branch..."
    git checkout -b refactor/[feature-name]

    # Run tests to ensure starting point is stable
    echo "🧪 Validating current state..."
    yarn test --run
    if [ $? -ne 0 ]; then
      echo "❌ Tests failing before refactor - fix first!"
      exit 1
    fi
    echo "✅ Ready to refactor"
  during_refactoring: |
    # After each change, check what was modified
    echo "🔍 Reviewing changes..."
    git diff --stat
    git diff

    # Validate the change
    yarn lint && yarn test --run

    # Commit atomically
    git add -p  # Interactive staging
    git commit -m "refactor([feature-name]): [specific change description]"

    # Show what was changed
    git show --stat
  common_scenarios:
    - name: Splitting a use case
      wrong_example: >
        interface CreateUserAndSendEmailUseCase {
          execute: (input: CreateUserAndSendEmailInput) => Promise<CreateUserAndSendEmailOutput>
        }
      correct_example: >
        interface CreateUserUseCase {
          execute: (input: CreateUserInput) => Promise<CreateUserOutput>
        }

        interface SendWelcomeEmailUseCase {
          execute: (input: SendWelcomeEmailInput) => Promise<SendWelcomeEmailOutput>
        }
    - name: Renaming domain errors
      wrong_example: |
        export class ErrorUserExists extends Error {
          constructor() {
            super('Error: user exists')
            this.name = 'ErrorUserExists'
          }
        }
      correct_example: |
        export class UserAlreadyExistsError extends Error {
          constructor() {
            super('User with this email already exists')
            this.name = 'UserAlreadyExistsError'
          }
        }
learning_patterns:
  common_errors:
    - pattern: import axios
      fix: Remove external library imports from domain layer
      score_impact: -2
    - pattern: CreateUserAndSend
      fix: Split into two separate use cases (SRP violation)
      score_impact: -1
    - pattern: missing @domainConcept
      fix: Add domain concept documentation for +2 score
      score_impact: 1
  success_indicators:
    - Uses ubiquitous language consistently
    - Follows single responsibility principle
    - No dependency violations
    - Comprehensive test coverage
    - Clean git history with atomic commits
