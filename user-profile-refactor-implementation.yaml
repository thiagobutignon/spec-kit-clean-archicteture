version: 3.0.0
metadata:
  title: UserProfile Domain Layer - Clean Architecture
  description: Refactoring template for user profile feature to add nickname field.
  source: DOMAIN_TEMPLATE.yaml
  lastUpdated: 2025-01-16
structure:
  basePath: src/features/user-profile/domain
  folders:
    - errors
    - use-cases
    - test
layer_rules:
  can_import_from_domain:
    - Data Layer - Implements the use case interfaces
    - Presentation Layer - Uses domain types and calls use cases
    - Infrastructure Layer - May use domain types for adapters
    - Main/Factory Layer - Wires everything together, knows all layers
    - Test Files - Can import domain types and interfaces for testing
  cannot_import_from_domain:
    - External Libraries - Should never know about domain
    - Node Modules - Third-party code should not depend on domain
  domain_cannot_import_from:
    - Any other layer - Domain must be completely independent
    - Data Layer - No implementation details
    - Presentation Layer - No UI concerns
    - Infrastructure Layer - No external dependencies
    - Main Layer - No dependency injection logic
    - External Libraries - No third-party dependencies
domain_rules:
  allowed:
    - Simple type definitions (Input/Output types)
    - Use case interfaces (contracts only)
    - Domain-specific error classes
    - Test mock functions
  forbidden:
    - Framework dependencies (React, Next.js, Express)
    - External libraries (axios, fetch, database clients)
    - Implementation details of any kind
    - UI components
    - HTTP/Database/File system operations
    - Environment variables
    - Console.log or any I/O operations
    - Value objects
    - Entities
    - Business rules or business logic
    - Validation logic
    - Calculations or computations
    - Any behavior beyond type definitions and interfaces
use_case_rules:
  should:
    - Define only interfaces/contracts, not implementations
    - Have EXACTLY ONE responsibility (one business operation)
    - Do ONE thing and ONE thing only (never multiple operations)
    - Return domain types or primitives
    - Be named with verbs (CreateUser, AuthenticateUser, etc.)
    - Be framework agnostic
  should_not:
    - Contain implementation logic
    - Know about HTTP, databases, or external services
    - Import from data, presentation, or infrastructure layers
    - Have side effects
    - Execute multiple operations (e.g., CreateUserAndSendEmail is wrong)
error_rules:
  should:
    - Extend the native Error class
    - Have descriptive names ending with Error
    - Contain meaningful error messages
    - Represent business rule violations
    - Be thrown when domain invariants are violated
  should_not:
    - Contain HTTP status codes
    - Include technical/implementation details
    - Expose sensitive information
    - Import external dependencies
test_helper_rules:
  should:
    - Create mock/stub implementations of use cases
    - Generate fake test data
    - Be pure functions that return consistent data
    - Help reduce test boilerplate
    - Use ONLY Vitest (Jest is prohibited)
  should_not:
    - Make real API calls or database queries
    - Depend on external services
    - Contain test assertions (those belong in test files)
    - Have side effects or maintain state
    - Use Jest (use Vitest instead)
steps:
  - id: refactor-get-user-profile-output
    type: refactor_file
    description: Add optional nickname field to GetUserProfileOutput type
    status: SUCCESS
    rlhf_score: null
    execution_log: |
      Completed successfully at 2025-09-16T12:12:46.393Z.

      --- SCRIPT OUTPUT ---
      üîç Running lint check...
      yarn run v1.22.22
      warning ../../package.json: No license field
      $ eslint .

      /Users/thiagobutignon/dev/spec-kit-clean-archicteture/coverage/block-navigation.js
        1:1  warning  Unused eslint-disable directive (no problems were reported)

      ‚úñ 1 problem (0 errors, 1 warning)
        0 errors and 1 warning potentially fixable with the `--fix` option.

      Done in 0.84s.
      ‚úÖ Lint passed
      üß™ Running tests with coverage...
      yarn run v1.22.22
      warning ../../package.json: No license field
      $ vitest --passWithNoTests --coverage

       RUN  v3.2.4 /Users/thiagobutignon/dev/spec-kit-clean-archicteture
            Coverage enabled with v8

      No test files found, exiting with code 0

      include: **/*.{test,spec}.?(c|m)[jt]s?(x)
      exclude:  **/node_modules/**, **/dist/**, **/cypress/**, **/.{idea,git,cache,output,temp}/**, **/{karma,rollup,webpack,vite,vitest,jest,ava,babel,nyc,cypress,tsup,build,eslint,prettier}.config.*

       % Coverage report from v8
      -------------------|---------|----------|---------|---------|-------------------
      File               | % Stmts | % Branch | % Funcs | % Lines | Uncovered Line #s 
      -------------------|---------|----------|---------|---------|-------------------
      All files          |       0 |    66.66 |   66.66 |       0 |                   
       ...n-archicteture |       0 |    66.66 |   66.66 |       0 |                   
        execute-steps.ts |       0 |      100 |     100 |       0 | 3-265             
        logger.ts        |       0 |        0 |       0 |       0 | 1-46              
        ...ementation.ts |       0 |      100 |     100 |       0 | 3-293             
       .../domain/errors |       0 |      100 |     100 |       0 |                   
        ...-not-found.ts |       0 |      100 |     100 |       0 | 5-10              
       ...le/domain/test |       0 |        0 |       0 |       0 |                   
        ...e-use-case.ts |       0 |        0 |       0 |       0 | 1-29              
       ...main/use-cases |       0 |        0 |       0 |       0 |                   
        ...er-profile.ts |       0 |        0 |       0 |       0 |                   
      -------------------|---------|----------|---------|---------|-------------------
      Done in 0.52s.
      ‚úÖ Tests passed
      üì¶ Staging changes...
      üíæ Creating commit...
      [main 3d8e131] refactor(user-profile): add nickname field to GetUserProfileOutput
       18 files changed, 550 insertions(+), 797 deletions(-)
       create mode 100644 .logs/user-profile-refactor-implementation/execution.log
       delete mode 100644 temp-plan.yaml
       create mode 100644 user-profile-refactor-implementation.yaml
      ‚úÖ Successfully committed
    references:
      - type: internal_code_analysis
        source: serena
        tool: find_symbol
        query: GetUserProfileOutput
        description: Located GetUserProfileOutput type that needs to be modified to
          include nickname field.
      - type: external_pattern
        source: context7
        query: system design user profiles
        url: https://github.com/donnemartin/system-design-primer
        description: Following system design patterns for user profile attributes and
          data modeling.
    path: src/features/user-profile/domain/use-cases/get-user-profile.ts
    template: |
      <<<REPLACE>>>
      export type GetUserProfileOutput = {
        id: string
        email: string
        firstName: string
        lastName: string
      }
      <<</REPLACE>>>
      <<<WITH>>>
      export type GetUserProfileOutput = {
        id: string
        email: string
        firstName: string
        lastName: string
        nickname?: string
      }
      <<</WITH>>>
    validation_script: >
      echo "üîç Running lint check..."

      yarn lint

      if [ $? -ne 0 ]; then
        echo "‚ùå LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "‚ùå AUTO-FIX FAILED - Manual intervention required"
          echo "üìã Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "‚úÖ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "‚ùå LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi

      echo "‚úÖ Lint passed"


      echo "üß™ Running tests with coverage..."

      yarn test --coverage

      if [ $? -ne 0 ]; then
        echo "‚ùå TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "‚ùå Tests must be fixed manually"
        echo "üìã Check the test output above for details"
        exit 1
      fi

      echo "‚úÖ Tests passed"


      echo "üì¶ Staging changes..."

      git add .


      echo "üíæ Creating commit..."

      git commit -m "refactor(user-profile): add nickname field to
      GetUserProfileOutput"

      if [ $? -ne 0 ]; then
        echo "‚ùå COMMIT FAILED - Checking git status..."
        git status
        echo "üìã Review the status above and fix any issues"
        exit 1
      fi

      echo "‚úÖ Successfully committed"
  - id: refactor-mock-get-user-profile-output
    type: refactor_file
    description: Update mock to include optional nickname field
    status: PENDING
    rlhf_score: null
    execution_log: ""
    references:
      - type: internal_code_analysis
        source: serena
        tool: find_symbol
        query: mockGetUserProfileOutput
        description: Located mockGetUserProfileOutput function that needs to be updated
          to include nickname in test data.
    path: src/features/user-profile/domain/test/mock-get-user-profile-use-case.ts
    template: |
      <<<REPLACE>>>
      export const mockGetUserProfileOutput = (): GetUserProfileOutput => ({
        id: 'user-123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe'
      })
      <<</REPLACE>>>
      <<<WITH>>>
      export const mockGetUserProfileOutput = (): GetUserProfileOutput => ({
        id: 'user-123',
        email: 'test@example.com',
        firstName: 'John',
        lastName: 'Doe',
        nickname: 'JD'
      })
      <<</WITH>>>
    validation_script: |
      echo "üîç Running lint check..."
      yarn lint
      if [ $? -ne 0 ]; then
        echo "‚ùå LINT FAILED - Attempting auto-fix..."
        yarn lint --fix
        if [ $? -ne 0 ]; then
          echo "‚ùå AUTO-FIX FAILED - Manual intervention required"
          echo "üìã Run 'yarn lint' to see remaining errors"
          exit 1
        fi
        echo "‚úÖ Lint errors auto-fixed, validating again..."
        yarn lint
        if [ $? -ne 0 ]; then
          echo "‚ùå LINT STILL FAILING - Manual fixes needed"
          exit 1
        fi
      fi
      echo "‚úÖ Lint passed"

      echo "üß™ Running tests with coverage..."
      yarn test --coverage
      if [ $? -ne 0 ]; then
        echo "‚ùå TESTS FAILED - Running specific test to identify issue..."
        yarn test --run --reporter=verbose
        echo "‚ùå Tests must be fixed manually"
        echo "üìã Check the test output above for details"
        exit 1
      fi
      echo "‚úÖ Tests passed"

      echo "üì¶ Staging changes..."
      git add .

      echo "üíæ Creating commit..."
      git commit -m "test(user-profile): update mock to include nickname field"
      if [ $? -ne 0 ]; then
        echo "‚ùå COMMIT FAILED - Checking git status..."
        git status
        echo "üìã Review the status above and fix any issues"
        exit 1
      fi
      echo "‚úÖ Successfully committed"
troubleshooting:
  lint_fails:
    - DO NOT commit - Fix all lint errors first
    - Check for unused imports
    - Verify proper TypeScript types
    - Ensure no console.log statements
    - Run yarn lint --fix to auto-fix when possible
  tests_fail:
    - DO NOT commit - All tests must pass
    - Check if mocks match the actual interfaces
    - Verify Input/Output types are correct
    - Ensure test coverage meets requirements
    - "Run specific test: yarn test [test-file-path]"
  typescript_fails:
    - Check all type definitions match
    - Ensure no missing imports
    - Verify interface implementations are complete
    - Run yarn tsc --noEmit to check types
refactoring:
  before_refactoring: |
    # Check current status and differences
    echo "üìä Checking current changes..."
    git status
    git diff

    # Ensure clean working directory
    echo "‚úÖ Saving current work..."
    git stash save "WIP: before refactoring"

    # Create refactoring branch
    echo "üåø Creating refactor branch..."
    git checkout -b refactor/[feature-name]

    # Run tests to ensure starting point is stable
    echo "üß™ Validating current state..."
    yarn test --run
    if [ $? -ne 0 ]; then
      echo "‚ùå Tests failing before refactor - fix first!"
      exit 1
    fi
    echo "‚úÖ Ready to refactor"
  during_refactoring: |
    # After each change, check what was modified
    echo "üîç Reviewing changes..."
    git diff --stat
    git diff

    # Validate the change
    yarn lint && yarn test --run

    # Commit atomically
    git add -p  # Interactive staging to commit only related changes
    git commit -m "refactor([feature-name]): [specific change description]"

    # Show what was changed in the last commit
    git show --stat
  common_scenarios:
    - name: Splitting a use case
      wrong_example: >
        interface CreateUserAndSendEmailUseCase {
          execute: (input: CreateUserAndSendEmailInput) => Promise<CreateUserAndSendEmailOutput>
        }
      correct_example: >
        interface CreateUserUseCase {
          execute: (input: CreateUserInput) => Promise<CreateUserOutput>
        }

        interface SendWelcomeEmailUseCase {
          execute: (input: SendWelcomeEmailInput) => Promise<SendWelcomeEmailOutput>
        }
      script: |
        # Split the combined use case into separate files
        # Update all imports and references
        # Run tests after each change
    - name: Renaming for clarity
      script: >
        # 1. See all occurrences before changing

        echo "üîç Finding all occurrences of [OldName]..."

        grep -r "[OldName]" src/features/[feature-name]/


        # 2. Perform the rename

        echo "‚úèÔ∏è Renaming [OldName] to [NewName]..."

        # Update files...


        # 3. Review the changes

        echo "üìä Reviewing rename changes..."

        git diff --word-diff


        # 4. Validate nothing broke

        yarn lint && yarn test --run


        # 5. Check if rename is complete

        echo "üîç Ensuring no [OldName] remains..."

        grep -r "[OldName]" src/features/[feature-name]/

        if [ $? -eq 0 ]; then
          echo "‚ö†Ô∏è Warning: [OldName] still found in some files"
        fi


        # 6. Commit the rename

        git add .

        git commit -m "refactor([feature-name]): rename [OldName] to [NewName]
        for clarity"


        # 7. Show the final diff

        git show --stat
recovery:
  accidental_commit: |
    # Revert the last commit but keep changes
    git reset --soft HEAD~1

    # Fix the issues
    # ... make corrections ...

    # Re-run validation
    yarn lint
    yarn test --coverage

    # Commit again with fixed code
    git add .
    git commit -m "[original message] - fixed"
  domain_polluted: >
    # 1. Identify violations in domain

    echo "üîç Checking for domain violations..."

    git diff src/features/[feature-name]/domain/


    # Check for forbidden patterns

    echo "‚ö†Ô∏è Checking for business logic..."

    grep -r "class.*{.*calculate\|validate\|process"
    src/features/[feature-name]/domain/


    echo "‚ö†Ô∏è Checking for external dependencies..."

    grep -r "import.*axios\|fetch\|http" src/features/[feature-name]/domain/


    echo "‚ö†Ô∏è Checking for console logs..."

    grep -r "console\." src/features/[feature-name]/domain/


    # 2. Show what needs to be moved

    git diff src/features/[feature-name]/domain/ --name-only


    # 3. After moving code to proper layers

    echo "‚úÖ Validating domain is clean..."

    yarn lint

    yarn test --run


    # 4. Commit the cleanup

    git add .

    git diff --staged --stat

    git commit -m "refactor([feature-name]): remove business logic from domain
    layer"
ai_guidelines:
  - "Always validate before committing: Run lint first, Run tests second, Only
    commit if both pass"
  - "If generation fails: Identify the specific error, Fix only that error,
    Re-run validation, Do NOT proceed until fixed"
  - "Follow the principle: One use case = One file = One responsibility"
  - If tempted to add "And" in a use case name, split it
  - "When in doubt: Choose simplicity over complexity, Split rather than
    combine, Ask for clarification rather than assume"
  - 'MUST generate different case styles from the input names (e.g., "Add Item
    To Cart" becomes: PascalCase=AddItemToCart, kebab-case=add-item-to-cart,
    lower case=add item to cart).'
  - MUST replace ALL placeholder variables (like __FEATURE_NAME_KEBAB_CASE__)
    with actual values
  - MUST NOT leave any placeholder variables in the final implementation
  - MUST NOT replace any [placeholders] found inside documentation sections like
    refactoring or recovery
  - MUST use vitest, NOT jest
  - MUST follow all domain rules - no business logic, no external dependencies
evaluation:
  final_status: PENDING
  final_rlhf_score: null
  reviewer_summary: |
    - What went well:
      - ...
    - Areas for improvement:
      - ...
  template_improvement_suggestions:
    - target_template: domain.template.yaml
      target_step_id: refactor-get-user-profile-output
      suggestion: The refactoring was straightforward and followed best practices.
      priority: low
